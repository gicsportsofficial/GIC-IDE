import { Transaction, WithApiMixin } from '@waves/ts-types';
import { TLong } from '../../interface';
/**
 * GET /utils/seed
 * Generate random seed
 */
export declare function fetchSeed(base: string, length?: number): Promise<{
    seed: string;
}>;
/**
 * POST /utils/script/compileCode
 * Compiles string code to base64 script representation
 */
export declare function fetchCompileCode(base: string, body: string): Promise<ICompileCode>;
/**
 * POST /utils/script/compileWithImports
 * Compiles string code with imports to base64 script representation
 */
export declare function fetchCompileWithImports(base: string, body: ICompileWithImportsBody): Promise<ICompileCode>;
/**
 * POST /utils/script/estimate
 * Estimates compiled code in Base64 representation
 */
export declare function fetchEstimate(base: string, body: string): Promise<IEstimate>;
/**
 * POST /utils/script/evaluate
 * Evaluates the provided expression, taking into account the deployed dApp contract
 */
export declare function fetchEvaluate(base: string, address: string, expr: string): Promise<IEvaluate>;
/**
 * POST /utils/transactionSerialize
 * Serialize transaction
 */
export declare function fetchTransactionSerialize(base: string, body: Transaction<TLong> & WithApiMixin): Promise<ITransactionSerialize>;
/**
 * POST /utils/hash/secure
 * Return SecureCryptographicHash of specified message
 */
export declare function fetchHashSecure(base: string, body: string): Promise<IHashSecure>;
/**
 * POST /utils/hash/fast
 * Return FastCryptographicHash of specified message
 */
export declare function fetchHashFast(base: string, body: string): Promise<IHashSecure>;
/**
 * POST /utils/script/meta
 * Account's script meta
 */
export declare function fetchScriptMeta(base: string, body: string): Promise<IScriptMeta>;
/**
 * POST /utils/script/decompile
 * Decompiles base64 script representation to string code
 */
export declare function fetchScriptDecompile(base: string, body: string): Promise<IScriptDecompile>;
/**
 * POST /utils/sign/{privateKey}
 * Return FastCryptographicHash of specified message
 */
export declare function fetchSignPrivateKey(base: string, privateKey: string, body: string): Promise<ISignPrivateKey>;
/**
 * GET /utils/time
 * Current Node time (UTC)
 */
export declare function fetchNodeTime(base: string): Promise<INodeTime>;
interface IScriptMeta {
    version?: string;
    callableFuncTypes?: Array<Record<string, Record<string, 'Int' | 'String' | 'Binary'>>>;
}
interface IScriptDecompile {
    STDLIB_VERSION: number;
    CONTENT_TYPE: string;
    script: string;
    SCRIPT_TYPE?: string;
}
export interface ICompileCode {
    script: string;
    complexity: number;
    callableComplexities: Record<string, number>;
    verifierComplexity: number;
    extraFee: TLong;
}
export interface IEstimate extends ICompileCode {
    scriptText: string;
}
export interface IEvaluate {
    address: string;
    expr: string;
    result: object;
    complexity: number;
}
interface ICompileWithImportsBody {
    script: string;
    imports: object;
}
interface IHashSecure {
    message: string;
    hash: string;
}
interface ITransactionSerialize {
    bytes: Array<number>;
}
interface ISignPrivateKey {
    message: string;
    signature: string;
}
interface INodeTime {
    system: number;
    NTP: number;
}
export {};

import { TTransactionStatuses } from '../../constants';
import { TLong } from '../../interface';
import { RequestInit } from '../../tools/request';
import { SignedTransaction, Transaction, TransactionFromNode, TransactionMap, WithApiMixin } from '@waves/ts-types';
/**
 * GET /transactions/unconfirmed/size
 * Number of unconfirmed transactions
 */
export declare function fetchUnconfirmedSize(base: string): Promise<IUnconfirmedSize>;
interface IUnconfirmedSize {
    size: number;
}
/**
 * POST /transactions/sign/{signerAddress}
 * Sign a transaction with a non-default private key
 */
/**
 * POST /transactions/calculateFee
 * Calculate transaction fee
 */
export declare function fetchCalculateFee<T extends keyof TransactionMap<TLong>>(base: string, tx: Partial<TransactionMap<TLong>[T]> & {
    type: T;
}, options?: RequestInit): Promise<TFeeInfo>;
export declare type TFeeInfo<LONG = TLong> = {
    feeAssetId: string | null;
    feeAmount: LONG;
};
/**
 * GET /transactions/unconfirmed
 * Unconfirmed transactions
 */
export declare function fetchUnconfirmed(base: string, options?: RequestInit): Promise<Array<Transaction<TLong> & WithApiMixin>>;
/**
 * Список транзакций по адресу
 * @param address
 * @param limit      максимальное количество транзакций в результате
 * @param after      искать транзакции после ID указанного в after
 * @param retry      количество попыток на выполнение запроса
 */
export declare function fetchTransactions(base: string, address: string, limit: number, after?: string, retry?: number, options?: RequestInit): Promise<Array<TransactionFromNode>>;
/**
 * GET /transactions/unconfirmed/info/{id}
 * Unconfirmed transaction info
 */
export declare function fetchUnconfirmedInfo(base: string, id: string, options?: RequestInit): Promise<Transaction<TLong> & WithApiMixin>;
/**
 * POST /transactions/sign
 * Sign a transaction
 */
/**
 * GET /transactions/info/{id}
 * Transaction info
 */
export declare function fetchInfo(base: string, id: string, options?: RequestInit): Promise<TransactionFromNode>;
/**
 * GET /transactions/info/
 * Get transactions by IDs
 */
export declare function fetchMultipleInfo(base: string, ids: string[], options?: RequestInit): Promise<Array<TransactionFromNode>>;
export declare function fetchStatus(base: string, list: Array<string>): Promise<ITransactionsStatus>;
export interface ITransactionsStatus {
    height: number;
    statuses: Array<ITransactionStatus>;
}
export interface ITransactionStatus {
    id: string;
    status: TTransactionStatuses;
    inUTX: boolean;
    confirmations: number;
    height: number;
}
export declare function broadcast<T extends SignedTransaction<Transaction<TLong>>>(base: string, tx: T, options?: RequestInit): Promise<T & WithApiMixin>;
export {};

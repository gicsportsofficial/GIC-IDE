import request, { parseResponse } from '../../tools/request';
import query from '../../tools/query';
/**
 * Waves balance history
 * @param base
 * @param address
 */
export function fetchBalanceHistory(base, address, options = Object.create(null)) {
    return request({
        base,
        url: `/debug/balances/history/${address}`,
        options
    });
}
/**
 * Get list of transactions with state changes where specified address has been involved
 * @param base
 * @param address
 * @param limit
 * @param after
 */
export function fetchStateChangesByAddress(base, address, limit, after, options = Object.create(null)) {
    return request({
        base,
        url: `/debug/stateChanges/address/${address}/limit/${limit}${query({ after })}`,
        options
    });
}
/**
 * Get invokeScript transaction state changes
 * @param base
 * @param txId
 */
export function fetchStateChangesByTxId(base, txId, options = Object.create(null)) {
    return request({
        base,
        url: `/transactions/info/${txId}`,
        options
    });
}
export function postPeerToTheBanList(base, peer) {
    return fetch(`${base}/debug/blacklist`, {
        method: "POST",
        body: peer,
        headers: {
            "Content-Type": "application/json"
        }
    }).then(parseResponse);
}
export function fetchConfigInfo(base, apiKey) {
    return fetch(`${base}/debug/configInfo`, {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        }
    }).then(parseResponse);
}
export function fetchDebugInfo(base, apiKey) {
    return fetch(`${base}/debug/info`, {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        }
    }).then(parseResponse);
}
export function fetchMinerInfo(base, apiKey) {
    return fetch(`${base}/debug/minerInfo`, {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        }
    }).then(parseResponse);
}
export function fetchPortfolios(base, address, apiKey) {
    return fetch(`${base}/debug/portfolios/${address}`, {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        }
    }).then(parseResponse);
}
export function debugPrint(base, message, apiKey) {
    return fetch(`${base}/debug/print`, {
        method: "POST",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ message })
    }).then(parseResponse);
}
/**
 * Removes all blocks after a given height. Max number of blocks back from the current height is set by waves.db.max-rollback-depth, 2000 by default
 * @param base
 * @param height
 * @param returnTransactionsToUtx
 * @param apiKey
 */
export function debugRollback(base, height, returnTransactionsToUtx, apiKey) {
    return fetch(`${base}/debug/rollback`, {
        method: "POST",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            rollbackTo: height,
            returnTransactionsToUtx
        })
    }).then(parseResponse);
}
/**
 * Rollback the state to the block with a given ID
 * @param base
 * @param height
 * @param returnTransactionsToUtx
 * @param apiKey
 */
export function debugRollbackTo(base, id, apiKey) {
    return fetch(`${base}/debug/rollback-to/${id}`, {
        method: "DELETE",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        },
    }).then(parseResponse);
}
/**
 * Regular address balance at the current height
 * @param base
 * @param apiKey
 */
export function debugState(base, apiKey) {
    return fetch(`${base}/debug/state`, {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        },
    }).then(parseResponse);
}
/**
 * Get state hash at height. Available only if node configuration contains waves.db.store-state-hashes = true option
 * @param base
 * @param height
 */
export function debugStateHash(base, height, options = Object.create(null)) {
    return request({
        base,
        url: `/debug/stateHash/${height}`,
        options
    });
}
/**
 * Regular address balance at the height. Max number of blocks back from the current height is set by waves.db.max-rollback-depth, 2000 by default
 * @param base
 * @param height
 * @param apiKey
 */
export function debugStateWaves(base, height, apiKey) {
    return fetch(`${base}/debug/stateWaves/${height}`, {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        },
    }).then(parseResponse);
}
/**
 * Validates a transaction and measures time spent in milliseconds. You should use the JSON transaction format with proofs
 * @param base
 * @param transaction
 */
export function debugValidate(base, transaction) {
    return fetch(`${base}/debug/validate`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: transaction
    }).then(parseResponse);
}
// @TODO need API key:
// GET /debug/stateWaves/{height}
// POST /debug/rollback
// DELETE /debug/rollback-to/{id}
// GET /debug/portfolios/{address}
// GET /debug/minerInfo
// GET /debug/historyInfo
// GET /debug/historyInfo
// GET /debug/info
// POST /debug/validate
// GET /debug/blocks/{howMany}
// POST /debug/blacklist
// POST /debug/print
// GET /debug/state
//# sourceMappingURL=index.js.map
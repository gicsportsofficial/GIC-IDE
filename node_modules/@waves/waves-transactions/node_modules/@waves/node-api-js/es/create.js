import * as addressesModule from './api-node/addresses';
import * as blocksModule from './api-node/blocks';
import * as transactionsModule from './api-node/transactions';
import * as leasingModule from './api-node/leasing';
import * as peersModule from './api-node/peers';
import * as rewardsModule from './api-node/rewards';
import * as utilsModule from './api-node/utils';
import * as debugModule from './api-node/debug';
import * as aliasModule from './api-node/alias';
import * as activationModule from './api-node/activation';
import * as nodeModule from './api-node/node';
import * as assetsModule from './api-node/assets';
import * as ethModule from './api-node/eth';
import query from './tools/query';
import resolve from './tools/resolve';
import request from './tools/request';
import broadcast from './tools/transactions/broadcast';
import getAssetsByTransaction from './tools/adresses/getAssetsByTransaction';
import getAssetIdListByTx from './tools/adresses/getAssetIdListByTx';
import getTransactionsWithAssets from './tools/adresses/getTransactionsWithAssets';
import availableSponsoredBalances from './tools/adresses/availableSponsoredBalances';
import wait from './tools/transactions/wait';
import parse from './tools/parse';
import getNetworkByte from './tools/blocks/getNetworkByte';
import getNetworkCode from './tools/blocks/getNetworkCode';
import createWatch from './tools/adresses/watch';
import * as toolsUtilsModule from './tools/utils';
export function create(base) {
    const addresses = wrapRecord(base, addressesModule);
    const blocks = wrapRecord(base, blocksModule);
    const transactions = wrapRecord(base, transactionsModule);
    const leasing = wrapRecord(base, leasingModule);
    const peers = wrapRecord(base, peersModule);
    const rewards = wrapRecord(base, rewardsModule);
    const utils = wrapRecord(base, utilsModule);
    const debug = wrapRecord(base, debugModule);
    const alias = wrapRecord(base, aliasModule);
    const activation = wrapRecord(base, activationModule);
    const node = wrapRecord(base, nodeModule);
    const assets = wrapRecord(base, assetsModule);
    const eth = wrapRecord(base, ethModule);
    const tools = {
        transactions: {
            broadcast: wrapRequest(base, broadcast),
            wait: wrapRequest(base, wait)
        },
        blocks: {
            getNetworkByte: wrapRequest(base, getNetworkByte),
            getNetworkCode: wrapRequest(base, getNetworkCode)
        },
        addresses: {
            createWatch: wrapRequest(base, createWatch),
            getAssetsByTransaction: wrapRequest(base, getAssetsByTransaction),
            getAssetIdListByTx,
            getTransactionsWithAssets: wrapRequest(base, getTransactionsWithAssets),
            availableSponsoredBalances: wrapRequest(base, availableSponsoredBalances)
        },
        utils: toolsUtilsModule,
        query,
        resolve,
        request,
        parse
    };
    return {
        addresses,
        blocks,
        transactions,
        leasing,
        tools,
        peers,
        rewards,
        utils,
        debug,
        alias,
        activation,
        node,
        assets,
        eth
    };
}
function wrapRecord(base, hash) {
    return Object.keys(hash).reduce((acc, methodName) => {
        acc[methodName] = wrapRequest(base, hash[methodName]);
        return acc;
    }, {});
}
function wrapRequest(base, callback) {
    return callback.bind(null, base);
}
//# sourceMappingURL=create.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.invokeExpression = void 0;
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const generic_1 = require("../generic");
const validators_1 = require("../validators");
const proto_serialize_1 = require("../proto-serialize");
const defaultVersions_1 = require("../defaultVersions");
const ts_types_1 = require("@waves/ts-types");
function invokeExpression(paramsOrTx, seed) {
    const type = ts_types_1.TRANSACTION_TYPE.INVOKE_EXPRESSION;
    const version = paramsOrTx.version || defaultVersions_1.DEFAULT_VERSIONS.INVOKE_EXPRESSION;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    const tx = {
        type,
        version,
        senderPublicKey,
        expression: generic_1.base64Prefix(paramsOrTx.expression),
        fee: generic_1.fee(paramsOrTx, 1000000),
        feeAssetId: generic_1.normalizeAssetId(paramsOrTx.feeAssetId),
        timestamp: paramsOrTx.timestamp || Date.now(),
        chainId: generic_1.networkByte(paramsOrTx.chainId, 87),
        proofs: paramsOrTx.proofs || [],
        id: '',
    };
    validators_1.validate.invokeExpression(tx);
    const bytes = proto_serialize_1.txToProtoBytes(tx);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, ts_lib_crypto_1.signBytes(s, bytes), i));
    tx.id = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes)));
    return tx;
}
exports.invokeExpression = invokeExpression;
//# sourceMappingURL=invoke-expression.js.map
import { WithProofs, IBasicParams, WithSender } from './transactions';
import { TPrivateKey, TSeedTypes } from './types';
export declare const mapObj: <T, U, K extends string>(obj: Record<K, T>, f: (v: T) => U) => Record<K, U>;
export declare function getSenderPublicKey(seedsAndIndexes: [string | TPrivateKey, number?][], params: Partial<WithSender>): string;
export declare const base64Prefix: (str: string | null) => string | null;
export declare function addProof(tx: WithProofs, proof: string, index?: number): WithProofs;
export declare function convertToPairs(seedObj?: TSeedTypes): [string | TPrivateKey, number | undefined][];
export declare const isOrder: (p: any) => p is (import("@waves/ts-types").ExchangeTransactionOrderData<string | number> & {
    version: 1;
} & WithProofs & WithSender) | (import("@waves/ts-types").ExchangeTransactionOrderData<string | number> & {
    version: 2;
} & WithProofs & WithSender) | (import("@waves/ts-types").ExchangeTransactionOrderData<string | number> & {
    matcherFeeAssetId: string | null;
} & {
    version: 3;
} & WithProofs & WithSender) | (import("@waves/ts-types").ExchangeTransactionOrderData<string | number> & {
    matcherFeeAssetId: string | null;
} & {
    version: 4;
} & WithProofs & WithSender);
export declare function networkByte(p: number | string | undefined, def: number): number;
export declare function fee(params: IBasicParams, def: number): string | number;
export declare function normalizeAssetId(assetId: string | null): string | null;
export declare function chainIdFromRecipient(recipient: string): number;

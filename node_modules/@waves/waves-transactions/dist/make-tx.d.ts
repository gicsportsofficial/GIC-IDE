import { IAliasParams, IBurnParams, ICancelLeaseParams, IDataParams, IInvokeScriptParams, IIssueParams, ILeaseParams, IMassTransferParams, IReissueParams, ISetAssetScriptParams, ISetScriptParams, ISponsorshipParams, ITransferParams, TTransactionType, WithId, WithSender } from './transactions';
import { AliasTransaction, BurnTransaction, CancelLeaseTransaction, DataTransaction, ExchangeTransaction, InvokeExpressionTransaction, InvokeScriptTransaction, IssueTransaction, LeaseTransaction, MassTransferTransaction, ReissueTransaction, SetAssetScriptTransaction, SetScriptTransaction, SponsorshipTransaction, TRANSACTION_TYPE, TransferTransaction, UpdateAssetInfoTransaction } from '@waves/ts-types';
export declare type TTransaction<T extends TTransactionType> = TxTypeMap[T];
export declare type TxTypeMap = {
    [TRANSACTION_TYPE.ISSUE]: IssueTransaction;
    [TRANSACTION_TYPE.TRANSFER]: TransferTransaction;
    [TRANSACTION_TYPE.REISSUE]: ReissueTransaction;
    [TRANSACTION_TYPE.BURN]: BurnTransaction;
    [TRANSACTION_TYPE.LEASE]: LeaseTransaction;
    [TRANSACTION_TYPE.CANCEL_LEASE]: CancelLeaseTransaction;
    [TRANSACTION_TYPE.ALIAS]: AliasTransaction;
    [TRANSACTION_TYPE.MASS_TRANSFER]: MassTransferTransaction;
    [TRANSACTION_TYPE.DATA]: DataTransaction;
    [TRANSACTION_TYPE.SET_SCRIPT]: SetScriptTransaction;
    [TRANSACTION_TYPE.SET_ASSET_SCRIPT]: SetAssetScriptTransaction;
    [TRANSACTION_TYPE.SPONSORSHIP]: SponsorshipTransaction;
    [TRANSACTION_TYPE.EXCHANGE]: ExchangeTransaction;
    [TRANSACTION_TYPE.INVOKE_SCRIPT]: InvokeScriptTransaction;
    [TRANSACTION_TYPE.UPDATE_ASSET_INFO]: UpdateAssetInfoTransaction;
    [TRANSACTION_TYPE.INVOKE_EXPRESSION]: InvokeExpressionTransaction;
};
export declare type TTxParamsWithType<T extends TTransactionType> = TxParamsTypeMap[T] & {
    type: T;
};
export declare type TxParamsTypeMap = {
    [TRANSACTION_TYPE.ISSUE]: IIssueParams;
    [TRANSACTION_TYPE.TRANSFER]: ITransferParams;
    [TRANSACTION_TYPE.REISSUE]: IReissueParams;
    [TRANSACTION_TYPE.BURN]: IBurnParams;
    [TRANSACTION_TYPE.LEASE]: ILeaseParams;
    [TRANSACTION_TYPE.CANCEL_LEASE]: ICancelLeaseParams;
    [TRANSACTION_TYPE.ALIAS]: IAliasParams;
    [TRANSACTION_TYPE.MASS_TRANSFER]: IMassTransferParams;
    [TRANSACTION_TYPE.DATA]: IDataParams;
    [TRANSACTION_TYPE.SET_SCRIPT]: ISetScriptParams;
    [TRANSACTION_TYPE.SET_ASSET_SCRIPT]: ISetAssetScriptParams;
    [TRANSACTION_TYPE.SPONSORSHIP]: ISponsorshipParams;
    [TRANSACTION_TYPE.EXCHANGE]: ExchangeTransaction;
    [TRANSACTION_TYPE.INVOKE_SCRIPT]: IInvokeScriptParams;
    [TRANSACTION_TYPE.UPDATE_ASSET_INFO]: UpdateAssetInfoTransaction;
    [TRANSACTION_TYPE.INVOKE_EXPRESSION]: InvokeExpressionTransaction;
};
/**
 * Makes transaction from params. Validates all fields and calculates id
 */
export declare function makeTx<T extends TTransactionType>(params: TTxParamsWithType<T> & WithSender): TTransaction<T> & WithId;
/**
 * Makes transaction bytes from validated transaction
 */
export declare function makeTxBytes<T extends TTransactionType>(tx: TTxParamsWithType<T> & WithSender & {
    version: number;
}): Uint8Array;

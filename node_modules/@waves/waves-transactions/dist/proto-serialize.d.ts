import * as wavesProto from '@waves/protobuf-serialization';
import { DataTransactionEntry, ExchangeTransactionOrder, GenesisTransaction } from '@waves/ts-types';
import { TTx, TTransaction, WithChainId } from './transactions';
export declare function txToProtoBytes(obj: TTransaction): Uint8Array;
export declare function signedTxToProtoBytes(obj: TTx): Uint8Array;
export declare function protoBytesToSignedTx(bytes: Uint8Array): TTx;
export declare function protoBytesToTx(bytes: Uint8Array): TTransaction;
export declare function protoTxDataToTx(t: wavesProto.waves.Transaction): TTransaction;
export declare function orderToProtoBytes(obj: ExchangeTransactionOrder): Uint8Array;
export declare function protoBytesToOrder(bytes: Uint8Array): (import("@waves/ts-types").ExchangeTransactionOrderData<string | number> & {
    version: 1;
} & {
    signature: string;
} & WithChainId) | (import("@waves/ts-types").ExchangeTransactionOrderData<string | number> & {
    version: 1;
} & {
    proofs: string[];
} & WithChainId) | (import("@waves/ts-types").ExchangeTransactionOrderData<string | number> & {
    version: 2;
} & {
    signature: string;
} & WithChainId) | (import("@waves/ts-types").ExchangeTransactionOrderData<string | number> & {
    version: 2;
} & {
    proofs: string[];
} & WithChainId) | (import("@waves/ts-types").ExchangeTransactionOrderData<string | number> & {
    matcherFeeAssetId: string | null;
} & {
    version: 3;
} & {
    signature: string;
} & WithChainId) | (import("@waves/ts-types").ExchangeTransactionOrderData<string | number> & {
    matcherFeeAssetId: string | null;
} & {
    version: 3;
} & {
    proofs: string[];
} & WithChainId) | (import("@waves/ts-types").ExchangeTransactionOrderData<string | number> & {
    matcherFeeAssetId: string | null;
} & {
    version: 4;
} & {
    signature: string;
} & WithChainId) | (import("@waves/ts-types").ExchangeTransactionOrderData<string | number> & {
    matcherFeeAssetId: string | null;
} & {
    version: 4;
} & {
    proofs: string[];
} & WithChainId);
export declare const txToProto: (t: Exclude<TTransaction, GenesisTransaction>) => wavesProto.waves.ITransaction;
export declare const signedTxToProto: (t: Exclude<TTx, GenesisTransaction>) => wavesProto.waves.ISignedTransaction;
export declare const dataEntryToProto: (de: DataTransactionEntry) => wavesProto.waves.DataTransactionData.IDataEntry;

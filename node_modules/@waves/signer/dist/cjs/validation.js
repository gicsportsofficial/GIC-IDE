"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateProviderInterface = exports.validateSignerOptions = exports.argsValidators = exports.invokeArgsValidator = exports.invokeArgsScheme = exports.setAssetScriptArgsValidator = exports.setAssetScriptArgsScheme = exports.exchangeArgsValidator = exports.exchangeArgsScheme = exports.sponsorshipArgsValidator = exports.sponsorshipArgsScheme = exports.setScriptArgsValidator = exports.setScriptArgsScheme = exports.dataArgsValidator = exports.dataArgsScheme = exports.massTransferArgsValidator = exports.massTransferArgsScheme = exports.aliasArgsValidator = exports.aliasArgsScheme = exports.cancelLeaseArgsValidator = exports.cancelLeaseArgsScheme = exports.leaseArgsValidator = exports.leaseArgsScheme = exports.burnArgsValidator = exports.burnArgsScheme = exports.reissueArgsValidator = exports.reissueArgsScheme = exports.transferArgsValidator = exports.transferArgsScheme = exports.issueArgsValidator = exports.issueArgsScheme = exports.validator = void 0;
var tslib_1 = require("tslib");
var defaultTo_1 = tslib_1.__importDefault(require("ramda/src/defaultTo"));
var prop_1 = tslib_1.__importDefault(require("ramda/src/prop"));
var ifElse_1 = tslib_1.__importDefault(require("ramda/src/ifElse"));
var pipe_1 = tslib_1.__importDefault(require("ramda/src/pipe"));
var equals_1 = tslib_1.__importDefault(require("ramda/src/equals"));
var lte_1 = tslib_1.__importDefault(require("ramda/src/lte"));
var not_1 = tslib_1.__importDefault(require("ramda/src/not"));
var validators_1 = require("./validators");
var ts_types_1 = require("@waves/ts-types");
var shouldValidate = pipe_1.default(equals_1.default(undefined), not_1.default);
var validateOptional = function (validator) {
    return ifElse_1.default(shouldValidate, validator, defaultTo_1.default(true));
};
// waves-transaction validator can't collect errors for each invalid field.
// This method does.
exports.validator = function (scheme, method) { return function (transaction) {
    var _a;
    var invalidFields = [];
    for (var _i = 0, _b = Object.entries(scheme); _i < _b.length; _i++) {
        var _c = _b[_i], fieldName = _c[0], validationScheme = _c[1];
        try {
            validators_1.validateBySchema((_a = {}, _a[fieldName] = validationScheme, _a), 
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            validators_1.noop)(transaction);
        }
        catch (error) {
            invalidFields.push(fieldName);
        }
    }
    return {
        isValid: invalidFields.length === 0,
        transaction: transaction,
        method: method,
        invalidFields: invalidFields,
    };
}; };
var getCommonValidators = function (transactionType) { return ({
    type: equals_1.default(transactionType),
    version: validateOptional(validators_1.orEq([undefined, 1, 2, 3])),
    senderPublicKey: validateOptional(validators_1.isPublicKey),
    fee: validateOptional(validators_1.isNumberLike),
    proofs: validateOptional(validators_1.isArray),
}); };
exports.issueArgsScheme = tslib_1.__assign(tslib_1.__assign({}, getCommonValidators(ts_types_1.TRANSACTION_TYPE.ISSUE)), { name: validators_1.isValidAssetName, description: validateOptional(validators_1.isValidAssetDescription), quantity: validators_1.isNumberLike, decimals: validators_1.isNumber, reissuable: validateOptional(validators_1.isBoolean), script: validateOptional(validators_1.isBase64), chainId: validateOptional(validators_1.isNumber) });
exports.issueArgsValidator = exports.validator(exports.issueArgsScheme, 'issue');
exports.transferArgsScheme = tslib_1.__assign(tslib_1.__assign({}, getCommonValidators(ts_types_1.TRANSACTION_TYPE.TRANSFER)), { amount: validators_1.isNumberLike, recipient: validators_1.isRecipient, assetId: validateOptional(validators_1.isAssetId), feeAssetId: validateOptional(validators_1.isAssetId), attachment: validateOptional(validators_1.isAttachment) });
exports.transferArgsValidator = exports.validator(exports.transferArgsScheme, 'transfer');
exports.reissueArgsScheme = tslib_1.__assign(tslib_1.__assign({}, getCommonValidators(ts_types_1.TRANSACTION_TYPE.REISSUE)), { assetId: validators_1.isAssetId, quantity: validators_1.isNumberLike, reissuable: validators_1.isBoolean, chainId: validateOptional(validators_1.isNumber) });
exports.reissueArgsValidator = exports.validator(exports.reissueArgsScheme, 'reissue');
exports.burnArgsScheme = tslib_1.__assign(tslib_1.__assign({}, getCommonValidators(ts_types_1.TRANSACTION_TYPE.BURN)), { 
    // TODO isAssetId (not WAVES)
    assetId: validators_1.isString, amount: validators_1.isNumberLike, chainId: validateOptional(validators_1.isNumber) });
exports.burnArgsValidator = exports.validator(exports.burnArgsScheme, 'burn');
exports.leaseArgsScheme = tslib_1.__assign(tslib_1.__assign({}, getCommonValidators(ts_types_1.TRANSACTION_TYPE.LEASE)), { amount: validators_1.isNumberLike, recipient: validators_1.isRecipient });
exports.leaseArgsValidator = exports.validator(exports.leaseArgsScheme, 'lease');
exports.cancelLeaseArgsScheme = tslib_1.__assign(tslib_1.__assign({}, getCommonValidators(ts_types_1.TRANSACTION_TYPE.CANCEL_LEASE)), { leaseId: pipe_1.default(validators_1.isString), chainId: validateOptional(validators_1.isNumber) });
exports.cancelLeaseArgsValidator = exports.validator(exports.cancelLeaseArgsScheme, 'cancel lease');
exports.aliasArgsScheme = tslib_1.__assign(tslib_1.__assign({}, getCommonValidators(ts_types_1.TRANSACTION_TYPE.ALIAS)), { alias: function (value) {
        return typeof value === 'string' ? validators_1.isValidAliasName(value) : false;
    } });
exports.aliasArgsValidator = exports.validator(exports.aliasArgsScheme, 'alias');
exports.massTransferArgsScheme = tslib_1.__assign(tslib_1.__assign({}, getCommonValidators(ts_types_1.TRANSACTION_TYPE.MASS_TRANSFER)), { transfers: validators_1.validatePipe(validators_1.isArray, pipe_1.default(prop_1.default('length'), lte_1.default(0)), function (data) {
        return data.every(validators_1.validatePipe(validators_1.isRequired(true), pipe_1.default(prop_1.default('recipient'), validators_1.isRecipient), pipe_1.default(prop_1.default('amount'), validators_1.isNumberLike)));
    }), assetId: validateOptional(validators_1.isAssetId), attachment: validateOptional(validators_1.isAttachment) });
exports.massTransferArgsValidator = exports.validator(exports.massTransferArgsScheme, 'mass transfer');
exports.dataArgsScheme = tslib_1.__assign(tslib_1.__assign({}, getCommonValidators(ts_types_1.TRANSACTION_TYPE.DATA)), { data: function (data) {
        return validators_1.isArray(data) && data.every(function (item) { return validators_1.isValidData(item); });
    } });
exports.dataArgsValidator = exports.validator(exports.dataArgsScheme, 'data'); // TODO fix any
exports.setScriptArgsScheme = tslib_1.__assign(tslib_1.__assign({}, getCommonValidators(ts_types_1.TRANSACTION_TYPE.SET_SCRIPT)), { script: validators_1.isBase64, chainId: validateOptional(validators_1.isNumber) });
exports.setScriptArgsValidator = exports.validator(exports.setScriptArgsScheme, 'set script');
exports.sponsorshipArgsScheme = tslib_1.__assign(tslib_1.__assign({}, getCommonValidators(ts_types_1.TRANSACTION_TYPE.SPONSORSHIP)), { 
    // TODO Add not WAVES ASSET ID
    assetId: validators_1.isString, minSponsoredAssetFee: validators_1.isNumberLike });
exports.sponsorshipArgsValidator = exports.validator(exports.sponsorshipArgsScheme, 'sponsorship');
exports.exchangeArgsScheme = tslib_1.__assign(tslib_1.__assign({}, getCommonValidators(ts_types_1.TRANSACTION_TYPE.EXCHANGE)), { order1: validators_1.validatePipe(validators_1.isRequired(true), validators_1.orderValidator), order2: validators_1.validatePipe(validators_1.isRequired(true), validators_1.orderValidator), amount: validators_1.isNumberLike, price: validators_1.isNumberLike, buyMatcherFee: validators_1.isNumberLike, sellMatcherFee: validators_1.isNumberLike });
exports.exchangeArgsValidator = exports.validator(exports.exchangeArgsScheme, 'exchange');
exports.setAssetScriptArgsScheme = tslib_1.__assign(tslib_1.__assign({}, getCommonValidators(ts_types_1.TRANSACTION_TYPE.SET_ASSET_SCRIPT)), { script: validators_1.isBase64, assetId: validators_1.isAssetId, chainId: validateOptional(validators_1.isNumber) });
exports.setAssetScriptArgsValidator = exports.validator(exports.setAssetScriptArgsScheme, 'set asset script');
exports.invokeArgsScheme = tslib_1.__assign(tslib_1.__assign({}, getCommonValidators(ts_types_1.TRANSACTION_TYPE.INVOKE_SCRIPT)), { dApp: validators_1.isRecipient, call: validateOptional(validators_1.validatePipe(pipe_1.default(prop_1.default('function'), validators_1.isString), pipe_1.default(prop_1.default('function'), prop_1.default('length'), lte_1.default(0)), pipe_1.default(prop_1.default('args'), validators_1.isArray))), payment: validateOptional(validators_1.validatePipe(validators_1.isArray, function (data) {
        return data.every(validators_1.validatePipe(pipe_1.default(prop_1.default('amount'), validators_1.isNumberLike), pipe_1.default(prop_1.default('assetId'), validators_1.isAssetId)));
    })), feeAssetId: validateOptional(validators_1.isAssetId), chainId: validateOptional(validators_1.isNumber) });
exports.invokeArgsValidator = exports.validator(exports.invokeArgsScheme, 'invoke');
exports.argsValidators = (_a = {},
    _a[ts_types_1.TRANSACTION_TYPE.ISSUE] = exports.issueArgsValidator,
    _a[ts_types_1.TRANSACTION_TYPE.TRANSFER] = exports.transferArgsValidator,
    _a[ts_types_1.TRANSACTION_TYPE.REISSUE] = exports.reissueArgsValidator,
    _a[ts_types_1.TRANSACTION_TYPE.BURN] = exports.burnArgsValidator,
    _a[ts_types_1.TRANSACTION_TYPE.LEASE] = exports.leaseArgsValidator,
    _a[ts_types_1.TRANSACTION_TYPE.CANCEL_LEASE] = exports.cancelLeaseArgsValidator,
    _a[ts_types_1.TRANSACTION_TYPE.ALIAS] = exports.aliasArgsValidator,
    _a[ts_types_1.TRANSACTION_TYPE.MASS_TRANSFER] = exports.massTransferArgsValidator,
    _a[ts_types_1.TRANSACTION_TYPE.DATA] = exports.dataArgsValidator,
    _a[ts_types_1.TRANSACTION_TYPE.SET_SCRIPT] = exports.setScriptArgsValidator,
    _a[ts_types_1.TRANSACTION_TYPE.SPONSORSHIP] = exports.sponsorshipArgsValidator,
    _a[ts_types_1.TRANSACTION_TYPE.EXCHANGE] = exports.exchangeArgsValidator,
    _a[ts_types_1.TRANSACTION_TYPE.SET_ASSET_SCRIPT] = exports.setAssetScriptArgsValidator,
    _a[ts_types_1.TRANSACTION_TYPE.INVOKE_SCRIPT] = exports.invokeArgsValidator,
    _a);
exports.validateSignerOptions = function (options) {
    var res = {
        isValid: true,
        invalidOptions: [],
    };
    var isValidLogLevel = function (level) {
        return ['verbose', 'production', 'error'].includes(String(level));
    };
    if (!validators_1.isString(options.NODE_URL)) {
        res.isValid = false;
        res.invalidOptions.push('NODE_URL');
    }
    if (!validateOptional(isValidLogLevel)(options.LOG_LEVEL)) {
        res.isValid = false;
        res.invalidOptions.push('debug');
    }
    return res;
};
exports.validateProviderInterface = function (provider) {
    var isFunction = function (value) { return typeof value === 'function'; };
    var scheme = {
        connect: isFunction,
        login: isFunction,
        logout: isFunction,
        signMessage: isFunction,
        signTypedData: isFunction,
        sign: isFunction,
    };
    var invalidProperties = [];
    for (var _i = 0, _a = Object.entries(scheme); _i < _a.length; _i++) {
        var _b = _a[_i], fieldName = _b[0], validator_1 = _b[1];
        if (!validator_1(provider[fieldName])) {
            invalidProperties.push(fieldName);
        }
    }
    return {
        isValid: invalidProperties.length === 0,
        invalidProperties: invalidProperties,
    };
};

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignerNetworkError = exports.SignerAuthError = exports.SignerProviderInternalError = exports.SignerEnsureProviderError = exports.SignerProviderConnectError = exports.SignerProviderInterfaceError = exports.SignerNetworkByteError = exports.SignerApiArgumentsError = exports.SignerOptionsError = exports.SignerError = exports.ERRORS = void 0;
var tslib_1 = require("tslib");
var REPOSITORY_URL = 'http://github.com/wavesplatform/signer';
exports.ERRORS = {
    SIGNER_OPTIONS: 1000,
    NETWORK_BYTE: 1001,
    NOT_AUTHORIZED: 1002,
    PROVIDER_CONNECT: 1003,
    ENSURE_PROVIDER: 1004,
    PROVIDER_INTERFACE: 1005,
    PROVIDER_INTERNAL: 1006,
    API_ARGUMENTS: 1007,
    NETWORK_ERROR: 1008,
};
var errorTemplate = function (error) {
    var details = error.details
        ? "    Details: " + error.details
        : undefined;
    return [
        "Signer error:",
        "    Title: " + error.title,
        "    Type: " + error.type,
        "    Code: " + error.code,
        details,
        "    More info: " + REPOSITORY_URL + "/README.md#error-codes",
    ]
        .filter(Boolean)
        .join('\n');
};
var SignerError = /** @class */ (function (_super) {
    tslib_1.__extends(SignerError, _super);
    function SignerError(details) {
        var _this = _super.call(this, errorTemplate(details)) || this;
        _this.code = details.code;
        _this.type = details.type;
        // Set the prototype explicitly.
        Object.setPrototypeOf(_this, SignerError.prototype);
        return _this;
    }
    return SignerError;
}(Error));
exports.SignerError = SignerError;
var SignerOptionsError = /** @class */ (function (_super) {
    tslib_1.__extends(SignerOptionsError, _super);
    function SignerOptionsError(args) {
        var _this = _super.call(this, {
            code: exports.ERRORS.SIGNER_OPTIONS,
            title: 'Invalid signer options',
            type: 'validation',
            details: "\n        Invalid signer options: " + args.join(', '),
            errorArgs: args,
        }) || this;
        Object.setPrototypeOf(_this, SignerOptionsError.prototype);
        return _this;
    }
    return SignerOptionsError;
}(SignerError));
exports.SignerOptionsError = SignerOptionsError;
var SignerApiArgumentsError = /** @class */ (function (_super) {
    tslib_1.__extends(SignerApiArgumentsError, _super);
    function SignerApiArgumentsError(args) {
        var _this = _super.call(this, {
            code: exports.ERRORS.API_ARGUMENTS,
            title: 'Invalid api method arguments',
            type: 'validation',
            details: "\n        " + args.join('\n        '),
            errorArgs: args,
        }) || this;
        Object.setPrototypeOf(_this, SignerApiArgumentsError.prototype);
        return _this;
    }
    return SignerApiArgumentsError;
}(SignerError));
exports.SignerApiArgumentsError = SignerApiArgumentsError;
var SignerNetworkByteError = /** @class */ (function (_super) {
    tslib_1.__extends(SignerNetworkByteError, _super);
    function SignerNetworkByteError(_a) {
        var error = _a.error, node = _a.node;
        var _this = _super.call(this, {
            code: exports.ERRORS.NETWORK_BYTE,
            title: 'Network byte fetching has failed',
            type: 'network',
            details: "\n        Could not fetch network from " + node + ": " + error,
            errorArgs: { error: error, node: node },
        }) || this;
        Object.setPrototypeOf(_this, SignerNetworkByteError.prototype);
        return _this;
    }
    return SignerNetworkByteError;
}(SignerError));
exports.SignerNetworkByteError = SignerNetworkByteError;
var SignerProviderInterfaceError = /** @class */ (function (_super) {
    tslib_1.__extends(SignerProviderInterfaceError, _super);
    function SignerProviderInterfaceError(invalidProperties) {
        var _this = _super.call(this, {
            code: exports.ERRORS.NETWORK_BYTE,
            title: 'Invalid Provider interface',
            type: 'validation',
            details: "\n        Invalid provider properties: " + invalidProperties.join(', '),
            errorArgs: invalidProperties,
        }) || this;
        Object.setPrototypeOf(_this, SignerProviderInterfaceError.prototype);
        return _this;
    }
    return SignerProviderInterfaceError;
}(SignerError));
exports.SignerProviderInterfaceError = SignerProviderInterfaceError;
var SignerProviderConnectError = /** @class */ (function (_super) {
    tslib_1.__extends(SignerProviderConnectError, _super);
    function SignerProviderConnectError(_a) {
        var error = _a.error, node = _a.node;
        var _this = _super.call(this, {
            code: exports.ERRORS.PROVIDER_CONNECT,
            title: 'Could not connect the Provider',
            type: 'network',
            errorArgs: { error: error, node: node },
        }) || this;
        Object.setPrototypeOf(_this, SignerProviderConnectError.prototype);
        return _this;
    }
    return SignerProviderConnectError;
}(SignerError));
exports.SignerProviderConnectError = SignerProviderConnectError;
var SignerEnsureProviderError = /** @class */ (function (_super) {
    tslib_1.__extends(SignerEnsureProviderError, _super);
    function SignerEnsureProviderError(method) {
        var _this = _super.call(this, {
            code: exports.ERRORS.ENSURE_PROVIDER,
            title: 'Provider instance is missing',
            type: 'provider',
            details: "Can't use method: " + method + ". Provider instance is missing",
            errorArgs: { failedMethod: method },
        }) || this;
        Object.setPrototypeOf(_this, SignerProviderConnectError.prototype);
        return _this;
    }
    return SignerEnsureProviderError;
}(SignerError));
exports.SignerEnsureProviderError = SignerEnsureProviderError;
var SignerProviderInternalError = /** @class */ (function (_super) {
    tslib_1.__extends(SignerProviderInternalError, _super);
    function SignerProviderInternalError(message) {
        var _this = _super.call(this, {
            code: exports.ERRORS.ENSURE_PROVIDER,
            title: 'Provider internal error',
            type: 'provider',
            details: "Provider internal error: " + message + ". This is not error of signer.",
            errorArgs: { errorMessage: message },
        }) || this;
        Object.setPrototypeOf(_this, SignerProviderConnectError.prototype);
        return _this;
    }
    return SignerProviderInternalError;
}(SignerError));
exports.SignerProviderInternalError = SignerProviderInternalError;
var SignerAuthError = /** @class */ (function (_super) {
    tslib_1.__extends(SignerAuthError, _super);
    function SignerAuthError(method) {
        var _this = _super.call(this, {
            code: exports.ERRORS.NOT_AUTHORIZED,
            title: 'Authorization error',
            type: 'authorization',
            details: "Can't use method: " + method + ". User must be logged in",
            errorArgs: { failedMethod: method },
        }) || this;
        Object.setPrototypeOf(_this, SignerProviderConnectError.prototype);
        return _this;
    }
    return SignerAuthError;
}(SignerError));
exports.SignerAuthError = SignerAuthError;
var SignerNetworkError = /** @class */ (function (_super) {
    tslib_1.__extends(SignerNetworkError, _super);
    // TODO REMOVE ANY, ADD MORE DETAILS
    function SignerNetworkError(params) {
        return _super.call(this, {
            code: exports.ERRORS.NETWORK_ERROR,
            title: 'Network Error',
            type: 'network',
            details: "Error connect to " + '',
            errorArgs: {},
        }) || this;
    }
    return SignerNetworkError;
}(SignerError));
exports.SignerNetworkError = SignerNetworkError;

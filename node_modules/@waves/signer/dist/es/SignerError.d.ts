export declare const ERRORS: {
    SIGNER_OPTIONS: 1000;
    NETWORK_BYTE: 1001;
    NOT_AUTHORIZED: 1002;
    PROVIDER_CONNECT: 1003;
    ENSURE_PROVIDER: 1004;
    PROVIDER_INTERFACE: 1005;
    PROVIDER_INTERNAL: 1006;
    API_ARGUMENTS: 1007;
    NETWORK_ERROR: 1008;
};
declare type ErrorDetails = {
    code: number;
    title: string;
    type: string;
    details?: string;
    errorArgs: any;
};
export declare class SignerError extends Error {
    readonly code: number;
    readonly type: string;
    constructor(details: ErrorDetails);
}
export declare class SignerOptionsError extends SignerError {
    constructor(args: string[]);
}
export declare class SignerApiArgumentsError extends SignerError {
    constructor(args: string[]);
}
export declare class SignerNetworkByteError extends SignerError {
    constructor({ error, node }: {
        error: string;
        node: string;
    });
}
export declare class SignerProviderInterfaceError extends SignerError {
    constructor(invalidProperties: string[]);
}
export declare class SignerProviderConnectError extends SignerError {
    constructor({ error, node }: {
        error: string;
        node: string;
    });
}
export declare class SignerEnsureProviderError extends SignerError {
    constructor(method: string);
}
export declare class SignerProviderInternalError extends SignerError {
    constructor(message: string);
}
export declare class SignerAuthError extends SignerError {
    constructor(method: string);
}
export declare class SignerNetworkError extends SignerError {
    constructor(params: any);
}
export {};

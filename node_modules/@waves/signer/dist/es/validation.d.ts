import { TRANSACTION_TYPE, TransactionType } from '@waves/ts-types';
import { SignerOptions } from '.';
declare type Validator = (scheme: {
    [key: string]: (value: any) => boolean;
}, method: string) => (args: Record<string, any>) => {
    isValid: boolean;
    transaction: any;
    method: string;
    invalidFields?: string[];
};
export declare const validator: Validator;
export declare const issueArgsScheme: {
    name: (value: unknown) => boolean;
    description: import("ramda").Arity1Fn;
    quantity: (value: unknown) => boolean;
    decimals: (value: unknown) => boolean;
    reissuable: import("ramda").Arity1Fn;
    script: import("ramda").Arity1Fn;
    chainId: import("ramda").Arity1Fn;
    type: (b: TransactionType) => boolean;
    version: import("ramda").Arity1Fn;
    senderPublicKey: import("ramda").Arity1Fn;
    fee: import("ramda").Arity1Fn;
    proofs: import("ramda").Arity1Fn;
};
export declare const issueArgsValidator: (args: Record<string, any>) => {
    isValid: boolean;
    transaction: any;
    method: string;
    invalidFields?: string[] | undefined;
};
export declare const transferArgsScheme: {
    amount: (value: unknown) => boolean;
    recipient: (value: unknown) => boolean;
    assetId: import("ramda").Arity1Fn;
    feeAssetId: import("ramda").Arity1Fn;
    attachment: import("ramda").Arity1Fn;
    type: (b: TransactionType) => boolean;
    version: import("ramda").Arity1Fn;
    senderPublicKey: import("ramda").Arity1Fn;
    fee: import("ramda").Arity1Fn;
    proofs: import("ramda").Arity1Fn;
};
export declare const transferArgsValidator: (args: Record<string, any>) => {
    isValid: boolean;
    transaction: any;
    method: string;
    invalidFields?: string[] | undefined;
};
export declare const reissueArgsScheme: {
    assetId: (value: unknown) => boolean;
    quantity: (value: unknown) => boolean;
    reissuable: (value: unknown) => boolean;
    chainId: import("ramda").Arity1Fn;
    type: (b: TransactionType) => boolean;
    version: import("ramda").Arity1Fn;
    senderPublicKey: import("ramda").Arity1Fn;
    fee: import("ramda").Arity1Fn;
    proofs: import("ramda").Arity1Fn;
};
export declare const reissueArgsValidator: (args: Record<string, any>) => {
    isValid: boolean;
    transaction: any;
    method: string;
    invalidFields?: string[] | undefined;
};
export declare const burnArgsScheme: {
    assetId: (value: unknown) => boolean;
    amount: (value: unknown) => boolean;
    chainId: import("ramda").Arity1Fn;
    type: (b: TransactionType) => boolean;
    version: import("ramda").Arity1Fn;
    senderPublicKey: import("ramda").Arity1Fn;
    fee: import("ramda").Arity1Fn;
    proofs: import("ramda").Arity1Fn;
};
export declare const burnArgsValidator: (args: Record<string, any>) => {
    isValid: boolean;
    transaction: any;
    method: string;
    invalidFields?: string[] | undefined;
};
export declare const leaseArgsScheme: {
    amount: (value: unknown) => boolean;
    recipient: (value: unknown) => boolean;
    type: (b: TransactionType) => boolean;
    version: import("ramda").Arity1Fn;
    senderPublicKey: import("ramda").Arity1Fn;
    fee: import("ramda").Arity1Fn;
    proofs: import("ramda").Arity1Fn;
};
export declare const leaseArgsValidator: (args: Record<string, any>) => {
    isValid: boolean;
    transaction: any;
    method: string;
    invalidFields?: string[] | undefined;
};
export declare const cancelLeaseArgsScheme: {
    leaseId: (x0: unknown) => boolean;
    chainId: import("ramda").Arity1Fn;
    type: (b: TransactionType) => boolean;
    version: import("ramda").Arity1Fn;
    senderPublicKey: import("ramda").Arity1Fn;
    fee: import("ramda").Arity1Fn;
    proofs: import("ramda").Arity1Fn;
};
export declare const cancelLeaseArgsValidator: (args: Record<string, any>) => {
    isValid: boolean;
    transaction: any;
    method: string;
    invalidFields?: string[] | undefined;
};
export declare const aliasArgsScheme: {
    alias: (value: unknown) => any;
    type: (b: TransactionType) => boolean;
    version: import("ramda").Arity1Fn;
    senderPublicKey: import("ramda").Arity1Fn;
    fee: import("ramda").Arity1Fn;
    proofs: import("ramda").Arity1Fn;
};
export declare const aliasArgsValidator: (args: Record<string, any>) => {
    isValid: boolean;
    transaction: any;
    method: string;
    invalidFields?: string[] | undefined;
};
export declare const massTransferArgsScheme: {
    transfers: (value: unknown) => boolean;
    assetId: import("ramda").Arity1Fn;
    attachment: import("ramda").Arity1Fn;
    type: (b: TransactionType) => boolean;
    version: import("ramda").Arity1Fn;
    senderPublicKey: import("ramda").Arity1Fn;
    fee: import("ramda").Arity1Fn;
    proofs: import("ramda").Arity1Fn;
};
export declare const massTransferArgsValidator: (args: Record<string, any>) => {
    isValid: boolean;
    transaction: any;
    method: string;
    invalidFields?: string[] | undefined;
};
export declare const dataArgsScheme: {
    data: (data: Array<unknown>) => boolean;
    type: (b: TransactionType) => boolean;
    version: import("ramda").Arity1Fn;
    senderPublicKey: import("ramda").Arity1Fn;
    fee: import("ramda").Arity1Fn;
    proofs: import("ramda").Arity1Fn;
};
export declare const dataArgsValidator: (args: Record<string, any>) => {
    isValid: boolean;
    transaction: any;
    method: string;
    invalidFields?: string[] | undefined;
};
export declare const setScriptArgsScheme: {
    script: (value: unknown) => boolean;
    chainId: import("ramda").Arity1Fn;
    type: (b: TransactionType) => boolean;
    version: import("ramda").Arity1Fn;
    senderPublicKey: import("ramda").Arity1Fn;
    fee: import("ramda").Arity1Fn;
    proofs: import("ramda").Arity1Fn;
};
export declare const setScriptArgsValidator: (args: Record<string, any>) => {
    isValid: boolean;
    transaction: any;
    method: string;
    invalidFields?: string[] | undefined;
};
export declare const sponsorshipArgsScheme: {
    assetId: (value: unknown) => boolean;
    minSponsoredAssetFee: (value: unknown) => boolean;
    type: (b: TransactionType) => boolean;
    version: import("ramda").Arity1Fn;
    senderPublicKey: import("ramda").Arity1Fn;
    fee: import("ramda").Arity1Fn;
    proofs: import("ramda").Arity1Fn;
};
export declare const sponsorshipArgsValidator: (args: Record<string, any>) => {
    isValid: boolean;
    transaction: any;
    method: string;
    invalidFields?: string[] | undefined;
};
export declare const exchangeArgsScheme: {
    order1: (value: unknown) => boolean;
    order2: (value: unknown) => boolean;
    amount: (value: unknown) => boolean;
    price: (value: unknown) => boolean;
    buyMatcherFee: (value: unknown) => boolean;
    sellMatcherFee: (value: unknown) => boolean;
    type: (b: TransactionType) => boolean;
    version: import("ramda").Arity1Fn;
    senderPublicKey: import("ramda").Arity1Fn;
    fee: import("ramda").Arity1Fn;
    proofs: import("ramda").Arity1Fn;
};
export declare const exchangeArgsValidator: (args: Record<string, any>) => {
    isValid: boolean;
    transaction: any;
    method: string;
    invalidFields?: string[] | undefined;
};
export declare const setAssetScriptArgsScheme: {
    script: (value: unknown) => boolean;
    assetId: (value: unknown) => boolean;
    chainId: import("ramda").Arity1Fn;
    type: (b: TransactionType) => boolean;
    version: import("ramda").Arity1Fn;
    senderPublicKey: import("ramda").Arity1Fn;
    fee: import("ramda").Arity1Fn;
    proofs: import("ramda").Arity1Fn;
};
export declare const setAssetScriptArgsValidator: (args: Record<string, any>) => {
    isValid: boolean;
    transaction: any;
    method: string;
    invalidFields?: string[] | undefined;
};
export declare const invokeArgsScheme: {
    dApp: (value: unknown) => boolean;
    call: import("ramda").Arity1Fn;
    payment: import("ramda").Arity1Fn;
    feeAssetId: import("ramda").Arity1Fn;
    chainId: import("ramda").Arity1Fn;
    type: (b: TransactionType) => boolean;
    version: import("ramda").Arity1Fn;
    senderPublicKey: import("ramda").Arity1Fn;
    fee: import("ramda").Arity1Fn;
    proofs: import("ramda").Arity1Fn;
};
export declare const invokeArgsValidator: (args: Record<string, any>) => {
    isValid: boolean;
    transaction: any;
    method: string;
    invalidFields?: string[] | undefined;
};
export declare const argsValidators: {
    3: (args: Record<string, any>) => {
        isValid: boolean;
        transaction: any;
        method: string;
        invalidFields?: string[] | undefined;
    };
    4: (args: Record<string, any>) => {
        isValid: boolean;
        transaction: any;
        method: string;
        invalidFields?: string[] | undefined;
    };
    5: (args: Record<string, any>) => {
        isValid: boolean;
        transaction: any;
        method: string;
        invalidFields?: string[] | undefined;
    };
    6: (args: Record<string, any>) => {
        isValid: boolean;
        transaction: any;
        method: string;
        invalidFields?: string[] | undefined;
    };
    8: (args: Record<string, any>) => {
        isValid: boolean;
        transaction: any;
        method: string;
        invalidFields?: string[] | undefined;
    };
    9: (args: Record<string, any>) => {
        isValid: boolean;
        transaction: any;
        method: string;
        invalidFields?: string[] | undefined;
    };
    10: (args: Record<string, any>) => {
        isValid: boolean;
        transaction: any;
        method: string;
        invalidFields?: string[] | undefined;
    };
    11: (args: Record<string, any>) => {
        isValid: boolean;
        transaction: any;
        method: string;
        invalidFields?: string[] | undefined;
    };
    12: (args: Record<string, any>) => {
        isValid: boolean;
        transaction: any;
        method: string;
        invalidFields?: string[] | undefined;
    };
    13: (args: Record<string, any>) => {
        isValid: boolean;
        transaction: any;
        method: string;
        invalidFields?: string[] | undefined;
    };
    14: (args: Record<string, any>) => {
        isValid: boolean;
        transaction: any;
        method: string;
        invalidFields?: string[] | undefined;
    };
    7: (args: Record<string, any>) => {
        isValid: boolean;
        transaction: any;
        method: string;
        invalidFields?: string[] | undefined;
    };
    15: (args: Record<string, any>) => {
        isValid: boolean;
        transaction: any;
        method: string;
        invalidFields?: string[] | undefined;
    };
    16: (args: Record<string, any>) => {
        isValid: boolean;
        transaction: any;
        method: string;
        invalidFields?: string[] | undefined;
    };
};
declare type SignerOptionsValidation = {
    isValid: boolean;
    invalidOptions: string[];
};
export declare const validateSignerOptions: (options: Partial<SignerOptions>) => SignerOptionsValidation;
export declare const validateProviderInterface: (provider: object) => {
    isValid: boolean;
    invalidProperties: string[];
};
export {};

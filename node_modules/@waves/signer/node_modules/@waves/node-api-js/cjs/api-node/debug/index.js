"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.debugValidate = exports.debugStateWaves = exports.debugStateHash = exports.debugState = exports.debugRollbackTo = exports.debugRollback = exports.debugPrint = exports.fetchPortfolios = exports.fetchMinerInfo = exports.fetchDebugInfo = exports.fetchConfigInfo = exports.postPeerToTheBanList = exports.fetchStateChangesByTxId = exports.fetchStateChangesByAddress = exports.fetchBalanceHistory = void 0;
var request_1 = __importStar(require("../../tools/request"));
var query_1 = __importDefault(require("../../tools/query"));
/**
 * Waves balance history
 * @param base
 * @param address
 */
function fetchBalanceHistory(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/debug/balances/history/" + address,
        options: options
    });
}
exports.fetchBalanceHistory = fetchBalanceHistory;
/**
 * Get list of transactions with state changes where specified address has been involved
 * @param base
 * @param address
 * @param limit
 * @param after
 */
function fetchStateChangesByAddress(base, address, limit, after, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/debug/stateChanges/address/" + address + "/limit/" + limit + query_1.default({ after: after }),
        options: options
    });
}
exports.fetchStateChangesByAddress = fetchStateChangesByAddress;
/**
 * Get invokeScript transaction state changes
 * @param base
 * @param txId
 */
function fetchStateChangesByTxId(base, txId, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/transactions/info/" + txId,
        options: options
    });
}
exports.fetchStateChangesByTxId = fetchStateChangesByTxId;
function postPeerToTheBanList(base, peer) {
    return fetch(base + "/debug/blacklist", {
        method: "POST",
        body: peer,
        headers: {
            "Content-Type": "application/json"
        }
    }).then(request_1.parseResponse);
}
exports.postPeerToTheBanList = postPeerToTheBanList;
function fetchConfigInfo(base, apiKey) {
    return fetch(base + "/debug/configInfo", {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        }
    }).then(request_1.parseResponse);
}
exports.fetchConfigInfo = fetchConfigInfo;
function fetchDebugInfo(base, apiKey) {
    return fetch(base + "/debug/info", {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        }
    }).then(request_1.parseResponse);
}
exports.fetchDebugInfo = fetchDebugInfo;
function fetchMinerInfo(base, apiKey) {
    return fetch(base + "/debug/minerInfo", {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        }
    }).then(request_1.parseResponse);
}
exports.fetchMinerInfo = fetchMinerInfo;
function fetchPortfolios(base, address, apiKey) {
    return fetch(base + "/debug/portfolios/" + address, {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        }
    }).then(request_1.parseResponse);
}
exports.fetchPortfolios = fetchPortfolios;
function debugPrint(base, message, apiKey) {
    return fetch(base + "/debug/print", {
        method: "POST",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ message: message })
    }).then(request_1.parseResponse);
}
exports.debugPrint = debugPrint;
/**
 * Removes all blocks after a given height. Max number of blocks back from the current height is set by waves.db.max-rollback-depth, 2000 by default
 * @param base
 * @param height
 * @param returnTransactionsToUtx
 * @param apiKey
 */
function debugRollback(base, height, returnTransactionsToUtx, apiKey) {
    return fetch(base + "/debug/rollback", {
        method: "POST",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            rollbackTo: height,
            returnTransactionsToUtx: returnTransactionsToUtx
        })
    }).then(request_1.parseResponse);
}
exports.debugRollback = debugRollback;
/**
 * Rollback the state to the block with a given ID
 * @param base
 * @param height
 * @param returnTransactionsToUtx
 * @param apiKey
 */
function debugRollbackTo(base, id, apiKey) {
    return fetch(base + "/debug/rollback-to/" + id, {
        method: "DELETE",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        },
    }).then(request_1.parseResponse);
}
exports.debugRollbackTo = debugRollbackTo;
/**
 * Regular address balance at the current height
 * @param base
 * @param apiKey
 */
function debugState(base, apiKey) {
    return fetch(base + "/debug/state", {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        },
    }).then(request_1.parseResponse);
}
exports.debugState = debugState;
/**
 * Get state hash at height. Available only if node configuration contains waves.db.store-state-hashes = true option
 * @param base
 * @param height
 */
function debugStateHash(base, height, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/debug/stateHash/" + height,
        options: options
    });
}
exports.debugStateHash = debugStateHash;
/**
 * Regular address balance at the height. Max number of blocks back from the current height is set by waves.db.max-rollback-depth, 2000 by default
 * @param base
 * @param height
 * @param apiKey
 */
function debugStateWaves(base, height, apiKey) {
    return fetch(base + "/debug/stateWaves/" + height, {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        },
    }).then(request_1.parseResponse);
}
exports.debugStateWaves = debugStateWaves;
/**
 * Validates a transaction and measures time spent in milliseconds. You should use the JSON transaction format with proofs
 * @param base
 * @param transaction
 */
function debugValidate(base, transaction) {
    return fetch(base + "/debug/validate", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: transaction
    }).then(request_1.parseResponse);
}
exports.debugValidate = debugValidate;
// @TODO need API key:
// GET /debug/stateWaves/{height}
// POST /debug/rollback
// DELETE /debug/rollback-to/{id}
// GET /debug/portfolios/{address}
// GET /debug/minerInfo
// GET /debug/historyInfo
// GET /debug/historyInfo
// GET /debug/info
// POST /debug/validate
// GET /debug/blocks/{howMany}
// POST /debug/blacklist
// POST /debug/print
// GET /debug/state
//# sourceMappingURL=index.js.map
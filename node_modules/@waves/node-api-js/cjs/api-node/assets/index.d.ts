import { TLong } from '../../interface';
import { AssetDecimals, IssueTransaction, SignedTransaction, WithApiMixin } from '@waves/ts-types';
/**
 * GET /assets/details/{assetId}
 * Information about an asset
 */
export declare function fetchDetails(base: string, assetId: string, options?: RequestInit): Promise<TAssetDetails>;
export declare function fetchDetails(base: string, assetId: Array<string>, options?: RequestInit): Promise<Array<TAssetDetails>>;
/**
 * POST /assets/details
 * Provides detailed information about the given assets
 */
export declare function fetchAssetsDetails(base: string, assetIds: Array<string>, options?: RequestInit): Promise<Array<TAssetDetails | TErrorResponse>>;
export declare function fetchAssetDistribution(base: string, assetId: string, height: number, limit: number, options?: RequestInit): Promise<IAssetDistribution>;
/**
 * TODO
 * GET /assets/{assetId}/distribution
 * Asset balance distribution
 */
export declare function fetchAssetsAddressLimit(base: string, address: string, limit: number, options?: RequestInit): Promise<Array<TAssetDetails>>;
/**
 * TODO
 * GET assets/nft/${address}/limit/${limit}
 * Asset balance distribution
 */
interface IFetchAssetsNftParams {
    address: string;
    limit: number;
    after?: string;
}
export declare function fetchAssetsNft(base: string, { address, limit, after }: IFetchAssetsNftParams, options?: RequestInit): Promise<Array<TAssetDetails>>;
export declare function fetchAssetsBalance(base: string, address: string, options?: RequestInit): Promise<TAssetsBalance>;
export declare function fetchBalanceAddressAssetId(base: string, address: string, assetId: string, options?: RequestInit): Promise<IBalanceAddressAssetId>;
export declare function convertEthAssetId(base: string, assetId: string): Promise<string>;
export interface IAssetDistribution {
    hasNext: boolean;
    lastItem: string | null;
    items: Record<string, number>;
}
export interface IBalanceAddressAssetId<LONG = TLong> {
    address: string;
    assetId: string;
    balance: LONG;
}
export declare type TAssetsBalance = {
    'address': string;
    'balances': Array<TAssetBalance>;
};
export declare type TAssetBalance<LONG = TLong> = {
    'assetId': string;
    'balance': LONG;
    'reissuable': true;
    'minSponsoredAssetFee': LONG | null;
    'sponsorBalance': LONG | null;
    'quantity': LONG;
    'issueTransaction': SignedTransaction<IssueTransaction & WithApiMixin> & {
        feeAssetId: null;
    };
};
export declare type TAssetDetails<LONG = TLong> = {
    assetId: string;
    issueHeight: number;
    issueTimestamp: number;
    issuer: string;
    issuerPublicKey: string;
    name: string;
    description: string;
    decimals: AssetDecimals;
    reissuable: boolean;
    quantity: LONG;
    scripted: boolean;
    minSponsoredAssetFee: LONG | null;
    originTransactionId: string;
};
export declare type TErrorResponse = {
    error: number;
    message: string;
};
export {};

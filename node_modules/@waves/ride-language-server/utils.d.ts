import { CompletionItem, Position } from 'vscode-languageserver-types';
import { TFunction, TStructField, TType } from '@waves/ride-js';
import { Context, TPosition } from "./context";
export declare const ctx: Context;
export declare function getVarDefinition(word: string, { line: row, character: col }: Position): {
    line: number;
    character: number;
} | undefined;
export declare const getCompletionDefaultResult: (p: TPosition) => (CompletionItem | {
    kind: 7;
    label: string;
} | {
    label: string;
    kind: 6;
    detail: string | undefined;
})[];
export declare const getCompletionResult: (inputWords: string[]) => CompletionItem[];
export declare const getColonOrPipeCompletionResult: (text: string, p: TPosition) => CompletionItem[];
export declare const checkPostfixFunction: (inputWord: string) => TFunction[];
export declare function getSignatureHelpResult(word: string, isShift: boolean): {
    label: string;
    parameters: {
        label: string;
    }[];
}[];
export declare function getHoverResult(word: string, inputWords: string[]): any[];
export declare function getWordByPos(string: string, character: number): string;
export declare const getLastArrayElement: (arr: string[] | null) => string;
export declare const getTypeDoc: (item: TStructField, isRec?: Boolean | undefined) => string;
export declare function intersection(types: TType[]): TStructField[];
export declare type TDecl = {
    name: string;
    namePos?: number;
    value: string;
    valuePos?: number;
    row?: number;
};
export declare function getDataByRegexp(text: string, re: RegExp): TDecl[];
export declare const unique: (arr: any) => any[];

(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["nodeApi"] = factory();
	else
		root["nodeApi"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@waves/bignumber/dist/bignumber.umd.min.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@waves/bignumber/dist/bignumber.umd.min.js ***!
  \*****************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

!function(e,t){ true?t(exports):undefined}(this,function(e){"use strict";var t=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,r=Math.ceil,n=Math.floor,i="[BigNumber Error] ",o=i+"Number primitive has more than 15 significant digits: ",u=1e14,s=14,f=9007199254740991,c=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],l=1e7,a=1e9;function h(e){var t=0|e;return e>0||e===t?t:t-1}function p(e){for(var t,r,n=1,i=e.length,o=e[0]+"";n<i;){for(t=e[n++]+"",r=s-t.length;r--;t="0"+t);o+=t}for(i=o.length;48===o.charCodeAt(--i););return o.slice(0,i+1||1)}function g(e,t){var r,n,i=e.c,o=t.c,u=e.s,s=t.s,f=e.e,c=t.e;if(!u||!s)return null;if(r=i&&!i[0],n=o&&!o[0],r||n)return r?n?0:-s:u;if(u!=s)return u;if(r=u<0,n=f==c,!i||!o)return n?0:!i^r?1:-1;if(!n)return f>c^r?1:-1;for(s=(f=i.length)<(c=o.length)?f:c,u=0;u<s;u++)if(i[u]!=o[u])return i[u]>o[u]^r?1:-1;return f==c?0:f>c^r?1:-1}function m(e,t,r,o){if(e<t||e>r||e!==n(e))throw Error(i+(o||"Argument")+("number"==typeof e?e<t||e>r?" out of range: ":" not an integer: ":" not a primitive number: ")+String(e))}function b(e){var t=e.c.length-1;return h(e.e/s)==t&&e.c[t]%2!=0}function N(e,t){return(e.length>1?e.charAt(0)+"."+e.slice(1):e)+(t<0?"e":"e+")+t}function w(e,t,r){var n,i;if(t<0){for(i=r+".";++t;i+=r);e=i+e}else if(++t>(n=e.length)){for(i=r,t-=n;--t;i+=r);e+=i}else t<n&&(e=e.slice(0,t)+"."+e.slice(t));return e}var d=function e(d){var y,O,v,A,E,_,R,D,U,B=q.prototype={constructor:q,toString:null,valueOf:null},L=new q(1),F=20,S=4,x=-7,I=21,P=-1e7,M=1e7,T=!1,C=1,j=0,G={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:"Â ",suffix:""},H="0123456789abcdefghijklmnopqrstuvwxyz";function q(e,r){var i,u,c,l,a,h,p,g,b=this;if(!(b instanceof q))return new q(e,r);if(null==r){if(e&&!0===e._isBigNumber)return b.s=e.s,void(!e.c||e.e>M?b.c=b.e=null:e.e<P?b.c=[b.e=0]:(b.e=e.e,b.c=e.c.slice()));if((h="number"==typeof e)&&0*e==0){if(b.s=1/e<0?(e=-e,-1):1,e===~~e){for(l=0,a=e;a>=10;a/=10,l++);return void(l>M?b.c=b.e=null:(b.e=l,b.c=[e]))}g=String(e)}else{if(!t.test(g=String(e)))return v(b,g,h);b.s=45==g.charCodeAt(0)?(g=g.slice(1),-1):1}(l=g.indexOf("."))>-1&&(g=g.replace(".","")),(a=g.search(/e/i))>0?(l<0&&(l=a),l+=+g.slice(a+1),g=g.substring(0,a)):l<0&&(l=g.length)}else{if(m(r,2,H.length,"Base"),10==r)return z(b=new q(e),F+b.e+1,S);if(g=String(e),h="number"==typeof e){if(0*e!=0)return v(b,g,h,r);if(b.s=1/e<0?(g=g.slice(1),-1):1,q.DEBUG&&g.replace(/^0\.0*|\./,"").length>15)throw Error(o+e)}else b.s=45===g.charCodeAt(0)?(g=g.slice(1),-1):1;for(i=H.slice(0,r),l=a=0,p=g.length;a<p;a++)if(i.indexOf(u=g.charAt(a))<0){if("."==u){if(a>l){l=p;continue}}else if(!c&&(g==g.toUpperCase()&&(g=g.toLowerCase())||g==g.toLowerCase()&&(g=g.toUpperCase()))){c=!0,a=-1,l=0;continue}return v(b,String(e),h,r)}h=!1,(l=(g=O(g,r,10,b.s)).indexOf("."))>-1?g=g.replace(".",""):l=g.length}for(a=0;48===g.charCodeAt(a);a++);for(p=g.length;48===g.charCodeAt(--p););if(g=g.slice(a,++p)){if(p-=a,h&&q.DEBUG&&p>15&&(e>f||e!==n(e)))throw Error(o+b.s*e);if((l=l-a-1)>M)b.c=b.e=null;else if(l<P)b.c=[b.e=0];else{if(b.e=l,b.c=[],a=(l+1)%s,l<0&&(a+=s),a<p){for(a&&b.c.push(+g.slice(0,a)),p-=s;a<p;)b.c.push(+g.slice(a,a+=s));a=s-(g=g.slice(a)).length}else a-=p;for(;a--;g+="0");b.c.push(+g)}}else b.c=[b.e=0]}function J(e,t,r,n){var i,o,u,s,f;if(null==r?r=S:m(r,0,8),!e.c)return e.toString();if(i=e.c[0],u=e.e,null==t)f=p(e.c),f=1==n||2==n&&(u<=x||u>=I)?N(f,u):w(f,u,"0");else if(o=(e=z(new q(e),t,r)).e,s=(f=p(e.c)).length,1==n||2==n&&(t<=o||o<=x)){for(;s<t;f+="0",s++);f=N(f,o)}else if(t-=u,f=w(f,o,"0"),o+1>s){if(--t>0)for(f+=".";t--;f+="0");}else if((t+=o-s)>0)for(o+1==s&&(f+=".");t--;f+="0");return e.s<0&&i?"-"+f:f}function k(e,t){for(var r,n=1,i=new q(e[0]);n<e.length;n++){if(!(r=new q(e[n])).s){i=r;break}t.call(i,r)&&(i=r)}return i}function V(e,t,r){for(var n=1,i=t.length;!t[--i];t.pop());for(i=t[0];i>=10;i/=10,n++);return(r=n+r*s-1)>M?e.c=e.e=null:r<P?e.c=[e.e=0]:(e.e=r,e.c=t),e}function z(e,t,i,o){var f,l,a,h,p,g,m,b=e.c,N=c;if(b){e:{for(f=1,h=b[0];h>=10;h/=10,f++);if((l=t-f)<0)l+=s,a=t,m=(p=b[g=0])/N[f-a-1]%10|0;else if((g=r((l+1)/s))>=b.length){if(!o)break e;for(;b.length<=g;b.push(0));p=m=0,f=1,a=(l%=s)-s+1}else{for(p=h=b[g],f=1;h>=10;h/=10,f++);m=(a=(l%=s)-s+f)<0?0:p/N[f-a-1]%10|0}if(o=o||t<0||null!=b[g+1]||(a<0?p:p%N[f-a-1]),o=i<4?(m||o)&&(0==i||i==(e.s<0?3:2)):m>5||5==m&&(4==i||o||6==i&&(l>0?a>0?p/N[f-a]:0:b[g-1])%10&1||i==(e.s<0?8:7)),t<1||!b[0])return b.length=0,o?(t-=e.e+1,b[0]=N[(s-t%s)%s],e.e=-t||0):b[0]=e.e=0,e;if(0==l?(b.length=g,h=1,g--):(b.length=g+1,h=N[s-l],b[g]=a>0?n(p/N[f-a]%N[a])*h:0),o)for(;;){if(0==g){for(l=1,a=b[0];a>=10;a/=10,l++);for(a=b[0]+=h,h=1;a>=10;a/=10,h++);l!=h&&(e.e++,b[0]==u&&(b[0]=1));break}if(b[g]+=h,b[g]!=u)break;b[g--]=0,h=1}for(l=b.length;0===b[--l];b.pop());}e.e>M?e.c=e.e=null:e.e<P&&(e.c=[e.e=0])}return e}function $(e){var t,r=e.e;return null===r?e.toString():(t=p(e.c),t=r<=x||r>=I?N(t,r):w(t,r,"0"),e.s<0?"-"+t:t)}return q.clone=e,q.ROUND_UP=0,q.ROUND_DOWN=1,q.ROUND_CEIL=2,q.ROUND_FLOOR=3,q.ROUND_HALF_UP=4,q.ROUND_HALF_DOWN=5,q.ROUND_HALF_EVEN=6,q.ROUND_HALF_CEIL=7,q.ROUND_HALF_FLOOR=8,q.EUCLID=9,q.config=q.set=function(e){var t,r;if(null!=e){if("object"!=typeof e)throw Error(i+"Object expected: "+e);if(e.hasOwnProperty(t="DECIMAL_PLACES")&&(m(r=e[t],0,a,t),F=r),e.hasOwnProperty(t="ROUNDING_MODE")&&(m(r=e[t],0,8,t),S=r),e.hasOwnProperty(t="EXPONENTIAL_AT")&&((r=e[t])&&r.pop?(m(r[0],-a,0,t),m(r[1],0,a,t),x=r[0],I=r[1]):(m(r,-a,a,t),x=-(I=r<0?-r:r))),e.hasOwnProperty(t="RANGE"))if((r=e[t])&&r.pop)m(r[0],-a,-1,t),m(r[1],1,a,t),P=r[0],M=r[1];else{if(m(r,-a,a,t),!r)throw Error(i+t+" cannot be zero: "+r);P=-(M=r<0?-r:r)}if(e.hasOwnProperty(t="CRYPTO")){if((r=e[t])!==!!r)throw Error(i+t+" not true or false: "+r);if(r){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw T=!r,Error(i+"crypto unavailable");T=r}else T=r}if(e.hasOwnProperty(t="MODULO_MODE")&&(m(r=e[t],0,9,t),C=r),e.hasOwnProperty(t="POW_PRECISION")&&(m(r=e[t],0,a,t),j=r),e.hasOwnProperty(t="FORMAT")){if("object"!=typeof(r=e[t]))throw Error(i+t+" not an object: "+r);G=r}if(e.hasOwnProperty(t="ALPHABET")){if("string"!=typeof(r=e[t])||/^.$|[+-.\s]|(.).*\1/.test(r))throw Error(i+t+" invalid: "+r);H=r}}return{DECIMAL_PLACES:F,ROUNDING_MODE:S,EXPONENTIAL_AT:[x,I],RANGE:[P,M],CRYPTO:T,MODULO_MODE:C,POW_PRECISION:j,FORMAT:G,ALPHABET:H}},q.isBigNumber=function(e){if(!e||!0!==e._isBigNumber)return!1;if(!q.DEBUG)return!0;var t,r,o=e.c,f=e.e,c=e.s;e:if("[object Array]"=={}.toString.call(o)){if((1===c||-1===c)&&f>=-a&&f<=a&&f===n(f)){if(0===o[0]){if(0===f&&1===o.length)return!0;break e}if((t=(f+1)%s)<1&&(t+=s),String(o[0]).length==t){for(t=0;t<o.length;t++)if((r=o[t])<0||r>=u||r!==n(r))break e;if(0!==r)return!0}}}else if(null===o&&null===f&&(null===c||1===c||-1===c))return!0;throw Error(i+"Invalid BigNumber: "+e)},q.maximum=q.max=function(){return k(arguments,B.lt)},q.minimum=q.min=function(){return k(arguments,B.gt)},q.random=(A=9007199254740992*Math.random()&2097151?function(){return n(9007199254740992*Math.random())}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(e){var t,o,u,f,l,h=0,p=[],g=new q(L);if(null==e?e=F:m(e,0,a),f=r(e/s),T)if(crypto.getRandomValues){for(t=crypto.getRandomValues(new Uint32Array(f*=2));h<f;)(l=131072*t[h]+(t[h+1]>>>11))>=9e15?(o=crypto.getRandomValues(new Uint32Array(2)),t[h]=o[0],t[h+1]=o[1]):(p.push(l%1e14),h+=2);h=f/2}else{if(!crypto.randomBytes)throw T=!1,Error(i+"crypto unavailable");for(t=crypto.randomBytes(f*=7);h<f;)(l=281474976710656*(31&t[h])+1099511627776*t[h+1]+4294967296*t[h+2]+16777216*t[h+3]+(t[h+4]<<16)+(t[h+5]<<8)+t[h+6])>=9e15?crypto.randomBytes(7).copy(t,h):(p.push(l%1e14),h+=7);h=f/7}if(!T)for(;h<f;)(l=A())<9e15&&(p[h++]=l%1e14);for(f=p[--h],e%=s,f&&e&&(l=c[s-e],p[h]=n(f/l)*l);0===p[h];p.pop(),h--);if(h<0)p=[u=0];else{for(u=-1;0===p[0];p.splice(0,1),u-=s);for(h=1,l=p[0];l>=10;l/=10,h++);h<s&&(u-=s-h)}return g.e=u,g.c=p,g}),q.sum=function(){for(var e=1,t=arguments,r=new q(t[0]);e<t.length;)r=r.plus(t[e++]);return r},O=function(){function e(e,t,r,n){for(var i,o,u=[0],s=0,f=e.length;s<f;){for(o=u.length;o--;u[o]*=t);for(u[0]+=n.indexOf(e.charAt(s++)),i=0;i<u.length;i++)u[i]>r-1&&(null==u[i+1]&&(u[i+1]=0),u[i+1]+=u[i]/r|0,u[i]%=r)}return u.reverse()}return function(t,r,n,i,o){var u,s,f,c,l,a,h,g,m=t.indexOf("."),b=F,N=S;for(m>=0&&(c=j,j=0,t=t.replace(".",""),a=(g=new q(r)).pow(t.length-m),j=c,g.c=e(w(p(a.c),a.e,"0"),10,n,"0123456789"),g.e=g.c.length),f=c=(h=e(t,r,n,o?(u=H,"0123456789"):(u="0123456789",H))).length;0==h[--c];h.pop());if(!h[0])return u.charAt(0);if(m<0?--f:(a.c=h,a.e=f,a.s=i,h=(a=y(a,g,b,N,n)).c,l=a.r,f=a.e),m=h[s=f+b+1],c=n/2,l=l||s<0||null!=h[s+1],l=N<4?(null!=m||l)&&(0==N||N==(a.s<0?3:2)):m>c||m==c&&(4==N||l||6==N&&1&h[s-1]||N==(a.s<0?8:7)),s<1||!h[0])t=l?w(u.charAt(1),-b,u.charAt(0)):u.charAt(0);else{if(h.length=s,l)for(--n;++h[--s]>n;)h[s]=0,s||(++f,h=[1].concat(h));for(c=h.length;!h[--c];);for(m=0,t="";m<=c;t+=u.charAt(h[m++]));t=w(t,f,u.charAt(0))}return t}}(),y=function(){function e(e,t,r){var n,i,o,u,s=0,f=e.length,c=t%l,a=t/l|0;for(e=e.slice();f--;)s=((i=c*(o=e[f]%l)+(n=a*o+(u=e[f]/l|0)*c)%l*l+s)/r|0)+(n/l|0)+a*u,e[f]=i%r;return s&&(e=[s].concat(e)),e}function t(e,t,r,n){var i,o;if(r!=n)o=r>n?1:-1;else for(i=o=0;i<r;i++)if(e[i]!=t[i]){o=e[i]>t[i]?1:-1;break}return o}function r(e,t,r,n){for(var i=0;r--;)e[r]-=i,i=e[r]<t[r]?1:0,e[r]=i*n+e[r]-t[r];for(;!e[0]&&e.length>1;e.splice(0,1));}return function(i,o,f,c,l){var a,p,g,m,b,N,w,d,y,O,v,A,E,_,R,D,U,B=i.s==o.s?1:-1,L=i.c,F=o.c;if(!(L&&L[0]&&F&&F[0]))return new q(i.s&&o.s&&(L?!F||L[0]!=F[0]:F)?L&&0==L[0]||!F?0*B:B/0:NaN);for(y=(d=new q(B)).c=[],B=f+(p=i.e-o.e)+1,l||(l=u,p=h(i.e/s)-h(o.e/s),B=B/s|0),g=0;F[g]==(L[g]||0);g++);if(F[g]>(L[g]||0)&&p--,B<0)y.push(1),m=!0;else{for(_=L.length,D=F.length,g=0,B+=2,(b=n(l/(F[0]+1)))>1&&(F=e(F,b,l),L=e(L,b,l),D=F.length,_=L.length),E=D,v=(O=L.slice(0,D)).length;v<D;O[v++]=0);U=F.slice(),U=[0].concat(U),R=F[0],F[1]>=l/2&&R++;do{if(b=0,(a=t(F,O,D,v))<0){if(A=O[0],D!=v&&(A=A*l+(O[1]||0)),(b=n(A/R))>1)for(b>=l&&(b=l-1),w=(N=e(F,b,l)).length,v=O.length;1==t(N,O,w,v);)b--,r(N,D<w?U:F,w,l),w=N.length,a=1;else 0==b&&(a=b=1),w=(N=F.slice()).length;if(w<v&&(N=[0].concat(N)),r(O,N,v,l),v=O.length,-1==a)for(;t(F,O,D,v)<1;)b++,r(O,D<v?U:F,v,l),v=O.length}else 0===a&&(b++,O=[0]);y[g++]=b,O[0]?O[v++]=L[E]||0:(O=[L[E]],v=1)}while((E++<_||null!=O[0])&&B--);m=null!=O[0],y[0]||y.splice(0,1)}if(l==u){for(g=1,B=y[0];B>=10;B/=10,g++);z(d,f+(d.e=g+p*s-1)+1,c,m)}else d.e=p,d.r=+m;return d}}(),E=/^(-?)0([xbo])(?=\w[\w.]*$)/i,_=/^([^.]+)\.$/,R=/^\.([^.]+)$/,D=/^-?(Infinity|NaN)$/,U=/^\s*\+(?=[\w.])|^\s+|\s+$/g,v=function(e,t,r,n){var o,u=r?t:t.replace(U,"");if(D.test(u))e.s=isNaN(u)?null:u<0?-1:1;else{if(!r&&(u=u.replace(E,function(e,t,r){return o="x"==(r=r.toLowerCase())?16:"b"==r?2:8,n&&n!=o?e:t}),n&&(o=n,u=u.replace(_,"$1").replace(R,"0.$1")),t!=u))return new q(u,o);if(q.DEBUG)throw Error(i+"Not a"+(n?" base "+n:"")+" number: "+t);e.s=null}e.c=e.e=null},B.absoluteValue=B.abs=function(){var e=new q(this);return e.s<0&&(e.s=1),e},B.comparedTo=function(e,t){return g(this,new q(e,t))},B.decimalPlaces=B.dp=function(e,t){var r,n,i,o=this;if(null!=e)return m(e,0,a),null==t?t=S:m(t,0,8),z(new q(o),e+o.e+1,t);if(!(r=o.c))return null;if(n=((i=r.length-1)-h(this.e/s))*s,i=r[i])for(;i%10==0;i/=10,n--);return n<0&&(n=0),n},B.dividedBy=B.div=function(e,t){return y(this,new q(e,t),F,S)},B.dividedToIntegerBy=B.idiv=function(e,t){return y(this,new q(e,t),0,1)},B.exponentiatedBy=B.pow=function(e,t){var o,u,f,c,l,a,h,p,g=this;if((e=new q(e)).c&&!e.isInteger())throw Error(i+"Exponent not an integer: "+$(e));if(null!=t&&(t=new q(t)),l=e.e>14,!g.c||!g.c[0]||1==g.c[0]&&!g.e&&1==g.c.length||!e.c||!e.c[0])return p=new q(Math.pow(+$(g),l?2-b(e):+$(e))),t?p.mod(t):p;if(a=e.s<0,t){if(t.c?!t.c[0]:!t.s)return new q(NaN);(u=!a&&g.isInteger()&&t.isInteger())&&(g=g.mod(t))}else{if(e.e>9&&(g.e>0||g.e<-1||(0==g.e?g.c[0]>1||l&&g.c[1]>=24e7:g.c[0]<8e13||l&&g.c[0]<=9999975e7)))return c=g.s<0&&b(e)?-0:0,g.e>-1&&(c=1/c),new q(a?1/c:c);j&&(c=r(j/s+2))}for(l?(o=new q(.5),a&&(e.s=1),h=b(e)):h=(f=Math.abs(+$(e)))%2,p=new q(L);;){if(h){if(!(p=p.times(g)).c)break;c?p.c.length>c&&(p.c.length=c):u&&(p=p.mod(t))}if(f){if(0===(f=n(f/2)))break;h=f%2}else if(z(e=e.times(o),e.e+1,1),e.e>14)h=b(e);else{if(0==(f=+$(e)))break;h=f%2}g=g.times(g),c?g.c&&g.c.length>c&&(g.c.length=c):u&&(g=g.mod(t))}return u?p:(a&&(p=L.div(p)),t?p.mod(t):c?z(p,j,S,void 0):p)},B.integerValue=function(e){var t=new q(this);return null==e?e=S:m(e,0,8),z(t,t.e+1,e)},B.isEqualTo=B.eq=function(e,t){return 0===g(this,new q(e,t))},B.isFinite=function(){return!!this.c},B.isGreaterThan=B.gt=function(e,t){return g(this,new q(e,t))>0},B.isGreaterThanOrEqualTo=B.gte=function(e,t){return 1===(t=g(this,new q(e,t)))||0===t},B.isInteger=function(){return!!this.c&&h(this.e/s)>this.c.length-2},B.isLessThan=B.lt=function(e,t){return g(this,new q(e,t))<0},B.isLessThanOrEqualTo=B.lte=function(e,t){return-1===(t=g(this,new q(e,t)))||0===t},B.isNaN=function(){return!this.s},B.isNegative=function(){return this.s<0},B.isPositive=function(){return this.s>0},B.isZero=function(){return!!this.c&&0==this.c[0]},B.minus=function(e,t){var r,n,i,o,f=this,c=f.s;if(t=(e=new q(e,t)).s,!c||!t)return new q(NaN);if(c!=t)return e.s=-t,f.plus(e);var l=f.e/s,a=e.e/s,p=f.c,g=e.c;if(!l||!a){if(!p||!g)return p?(e.s=-t,e):new q(g?f:NaN);if(!p[0]||!g[0])return g[0]?(e.s=-t,e):new q(p[0]?f:3==S?-0:0)}if(l=h(l),a=h(a),p=p.slice(),c=l-a){for((o=c<0)?(c=-c,i=p):(a=l,i=g),i.reverse(),t=c;t--;i.push(0));i.reverse()}else for(n=(o=(c=p.length)<(t=g.length))?c:t,c=t=0;t<n;t++)if(p[t]!=g[t]){o=p[t]<g[t];break}if(o&&(i=p,p=g,g=i,e.s=-e.s),(t=(n=g.length)-(r=p.length))>0)for(;t--;p[r++]=0);for(t=u-1;n>c;){if(p[--n]<g[n]){for(r=n;r&&!p[--r];p[r]=t);--p[r],p[n]+=u}p[n]-=g[n]}for(;0==p[0];p.splice(0,1),--a);return p[0]?V(e,p,a):(e.s=3==S?-1:1,e.c=[e.e=0],e)},B.modulo=B.mod=function(e,t){var r,n,i=this;return e=new q(e,t),!i.c||!e.s||e.c&&!e.c[0]?new q(NaN):!e.c||i.c&&!i.c[0]?new q(i):(9==C?(n=e.s,e.s=1,r=y(i,e,0,3),e.s=n,r.s*=n):r=y(i,e,0,C),(e=i.minus(r.times(e))).c[0]||1!=C||(e.s=i.s),e)},B.multipliedBy=B.times=function(e,t){var r,n,i,o,f,c,a,p,g,m,b,N,w,d,y,O=this,v=O.c,A=(e=new q(e,t)).c;if(!(v&&A&&v[0]&&A[0]))return!O.s||!e.s||v&&!v[0]&&!A||A&&!A[0]&&!v?e.c=e.e=e.s=null:(e.s*=O.s,v&&A?(e.c=[0],e.e=0):e.c=e.e=null),e;for(n=h(O.e/s)+h(e.e/s),e.s*=O.s,(a=v.length)<(m=A.length)&&(w=v,v=A,A=w,i=a,a=m,m=i),i=a+m,w=[];i--;w.push(0));for(d=u,y=l,i=m;--i>=0;){for(r=0,b=A[i]%y,N=A[i]/y|0,o=i+(f=a);o>i;)r=((p=b*(p=v[--f]%y)+(c=N*p+(g=v[f]/y|0)*b)%y*y+w[o]+r)/d|0)+(c/y|0)+N*g,w[o--]=p%d;w[o]=r}return r?++n:w.splice(0,1),V(e,w,n)},B.negated=function(){var e=new q(this);return e.s=-e.s||null,e},B.plus=function(e,t){var r,n=this,i=n.s;if(t=(e=new q(e,t)).s,!i||!t)return new q(NaN);if(i!=t)return e.s=-t,n.minus(e);var o=n.e/s,f=e.e/s,c=n.c,l=e.c;if(!o||!f){if(!c||!l)return new q(i/0);if(!c[0]||!l[0])return l[0]?e:new q(c[0]?n:0*i)}if(o=h(o),f=h(f),c=c.slice(),i=o-f){for(i>0?(f=o,r=l):(i=-i,r=c),r.reverse();i--;r.push(0));r.reverse()}for((i=c.length)-(t=l.length)<0&&(r=l,l=c,c=r,t=i),i=0;t;)i=(c[--t]=c[t]+l[t]+i)/u|0,c[t]=u===c[t]?0:c[t]%u;return i&&(c=[i].concat(c),++f),V(e,c,f)},B.precision=B.sd=function(e,t){var r,n,i,o=this;if(null!=e&&e!==!!e)return m(e,1,a),null==t?t=S:m(t,0,8),z(new q(o),e,t);if(!(r=o.c))return null;if(n=(i=r.length-1)*s+1,i=r[i]){for(;i%10==0;i/=10,n--);for(i=r[0];i>=10;i/=10,n++);}return e&&o.e+1>n&&(n=o.e+1),n},B.shiftedBy=function(e){return m(e,-f,f),this.times("1e"+e)},B.squareRoot=B.sqrt=function(){var e,t,r,n,i,o=this,u=o.c,s=o.s,f=o.e,c=F+4,l=new q("0.5");if(1!==s||!u||!u[0])return new q(!s||s<0&&(!u||u[0])?NaN:u?o:1/0);if(0==(s=Math.sqrt(+$(o)))||s==1/0?(((t=p(u)).length+f)%2==0&&(t+="0"),s=Math.sqrt(+t),f=h((f+1)/2)-(f<0||f%2),r=new q(t=s==1/0?"1e"+f:(t=s.toExponential()).slice(0,t.indexOf("e")+1)+f)):r=new q(s+""),r.c[0])for((s=(f=r.e)+c)<3&&(s=0);;)if(i=r,r=l.times(i.plus(y(o,i,c,1))),p(i.c).slice(0,s)===(t=p(r.c)).slice(0,s)){if(r.e<f&&--s,"9999"!=(t=t.slice(s-3,s+1))&&(n||"4999"!=t)){+t&&(+t.slice(1)||"5"!=t.charAt(0))||(z(r,r.e+F+2,1),e=!r.times(r).eq(o));break}if(!n&&(z(i,i.e+F+2,0),i.times(i).eq(o))){r=i;break}c+=4,s+=4,n=1}return z(r,r.e+F+1,S,e)},B.toExponential=function(e,t){return null!=e&&(m(e,0,a),e++),J(this,e,t,1)},B.toFixed=function(e,t){return null!=e&&(m(e,0,a),e=e+this.e+1),J(this,e,t)},B.toFormat=function(e,t,r){var n,o=this;if(null==r)null!=e&&t&&"object"==typeof t?(r=t,t=null):e&&"object"==typeof e?(r=e,e=t=null):r=G;else if("object"!=typeof r)throw Error(i+"Argument not an object: "+r);if(n=o.toFixed(e,t),o.c){var u,s=n.split("."),f=+r.groupSize,c=+r.secondaryGroupSize,l=r.groupSeparator||"",a=s[0],h=s[1],p=o.s<0,g=p?a.slice(1):a,m=g.length;if(c&&(u=f,f=c,c=u,m-=u),f>0&&m>0){for(u=m%f||f,a=g.substr(0,u);u<m;u+=f)a+=l+g.substr(u,f);c>0&&(a+=l+g.slice(u)),p&&(a="-"+a)}n=h?a+(r.decimalSeparator||"")+((c=+r.fractionGroupSize)?h.replace(new RegExp("\\d{"+c+"}\\B","g"),"$&"+(r.fractionGroupSeparator||"")):h):a}return(r.prefix||"")+n+(r.suffix||"")},B.toFraction=function(e){var t,r,n,o,u,f,l,a,h,g,m,b,N=this,w=N.c;if(null!=e&&(!(l=new q(e)).isInteger()&&(l.c||1!==l.s)||l.lt(L)))throw Error(i+"Argument "+(l.isInteger()?"out of range: ":"not an integer: ")+$(l));if(!w)return new q(N);for(t=new q(L),h=r=new q(L),n=a=new q(L),b=p(w),u=t.e=b.length-N.e-1,t.c[0]=c[(f=u%s)<0?s+f:f],e=!e||l.comparedTo(t)>0?u>0?t:h:l,f=M,M=1/0,l=new q(b),a.c[0]=0;g=y(l,t,0,1),1!=(o=r.plus(g.times(n))).comparedTo(e);)r=n,n=o,h=a.plus(g.times(o=h)),a=o,t=l.minus(g.times(o=t)),l=o;return o=y(e.minus(r),n,0,1),a=a.plus(o.times(h)),r=r.plus(o.times(n)),a.s=h.s=N.s,m=y(h,n,u*=2,S).minus(N).abs().comparedTo(y(a,r,u,S).minus(N).abs())<1?[h,n]:[a,r],M=f,m},B.toNumber=function(){return+$(this)},B.toPrecision=function(e,t){return null!=e&&m(e,1,a),J(this,e,t,2)},B.toString=function(e){var t,r=this,n=r.s,i=r.e;return null===i?n?(t="Infinity",n<0&&(t="-"+t)):t="NaN":(null==e?t=i<=x||i>=I?N(p(r.c),i):w(p(r.c),i,"0"):10===e?t=w(p((r=z(new q(r),F+i+1,S)).c),r.e,"0"):(m(e,2,H.length,"Base"),t=O(w(p(r.c),i,"0"),10,e,n,!0)),n<0&&r.c[0]&&(t="-"+t)),t},B.valueOf=B.toJSON=function(){return $(this)},B._isBigNumber=!0,B[Symbol.toStringTag]="BigNumber",B[Symbol.for("nodejs.util.inspect.custom")]=B.valueOf,null!=d&&q.set(d),q}(),y=function(){return(y=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},O=function(){function e(){this.format=e.DEFAULT_FORMAT,d.config({FORMAT:this.format})}return e.prototype.set=function(e){"FORMAT"in e&&(this.format=y({},this.format,e.FORMAT),e.FORMAT=this.format),d.config(e)},e.DEFAULT_FORMAT={prefix:"",decimalSeparator:".",groupSeparator:",",groupSize:3,secondaryGroupSize:0,fractionGroupSeparator:" ",fractionGroupSize:0,suffix:""},e}();e.BigNumber=function(){function e(t){"object"==typeof t&&e.isBigNumber(t)?this.bn=t.bn.plus(0):this.bn=e.toBigNumberJs(t)}return e.prototype.clone=function(){return new e(this)},e.prototype.add=function(t){return new e(this.bn.plus(e.toBigNumberJs(t)))},e.prototype.sub=function(t){return new e(this.bn.minus(e.toBigNumberJs(t)))},e.prototype.mul=function(t){return new e(this.bn.times(e.toBigNumberJs(t)))},e.prototype.div=function(t){return new e(this.bn.div(e.toBigNumberJs(t)))},e.prototype.pow=function(t){return new e(this.bn.pow(e.toBigNumberJs(t)))},e.prototype.abs=function(){return new e(this.bn.abs())},e.prototype.mod=function(t){return new e(this.bn.mod(e.toBigNumberJs(t)))},e.prototype.roundTo=function(t,r){return void 0===t&&(t=0),void 0===r&&(r=4),new e(this.bn.dp(t||0,r))},e.prototype.eq=function(t){return this.bn.eq(e.toBigNumberJs(t))},e.prototype.lt=function(t){return this.bn.lt(e.toBigNumberJs(t))},e.prototype.gt=function(t){return this.bn.gt(e.toBigNumberJs(t))},e.prototype.lte=function(t){return this.bn.lte(e.toBigNumberJs(t))},e.prototype.gte=function(t){return this.bn.gte(e.toBigNumberJs(t))},e.prototype.isNaN=function(){return this.bn.isNaN()},e.prototype.isFinite=function(){return this.bn.isFinite()},e.prototype.isZero=function(){return this.eq(0)},e.prototype.isPositive=function(){return this.gt(0)},e.prototype.isNegative=function(){return this.lt(0)},e.prototype.isInt=function(){return this.bn.isInteger()},e.prototype.getDecimalsCount=function(){return this.bn.dp()},e.prototype.isEven=function(){return this.mod(2).eq(0)},e.prototype.isOdd=function(){return!this.isEven()},e.prototype.toBytes=function(){if(!this.isInt())throw new Error("Cant create bytes from number with decimals!");var t=this.isNegative(),r=t?"1":"0",n=e._toLength(64,this.bn.plus(r).abs().toString(2).replace("-","")).split(""),i=[];do{i.push(parseInt(n.splice(0,8).join(""),2))}while(n.length);return t?Uint8Array.from(i.map(function(e){return 255-e})):Uint8Array.from(i)},e.prototype.toFormat=function(e,t,r){return this.bn.toFormat(e,t,r)},e.prototype.toFixed=function(e,t){return null==e?this.bn.toFixed():this.bn.toFixed(e,t)},e.prototype.toString=function(){return this.toFixed()},e.prototype.toNumber=function(){return this.bn.toNumber()},e.prototype.toJSON=function(){return this.bn.toFixed()},e.prototype.valueOf=function(){return this.bn.valueOf()},e.fromBytes=function(t){if(8!==t.length)throw new Error("Wrong bytes length! Need 8 bytes!");var r=t[0]>127,n=Array.from(t).map(function(e){return r?255-e:e}).map(function(t){return e._toLength(8,t.toString(2))}).join(""),i=new e(new d(n,2));return r?i.mul(-1).sub(1):i},e.max=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.toBigNumber(t).reduce(function(e,t){return e.gte(t)?e:t})},e.min=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.toBigNumber(t).reduce(function(e,t){return e.lte(t)?e:t})},e.sum=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.toBigNumber(t).reduce(function(e,t){return e.add(t)})},e.isBigNumber=function(t){return t&&"object"==typeof t&&(t instanceof e||Object.entries(e.prototype).filter(function(e){return"_"!==e[0].charAt(0)}).every(function(e){var r=e[0],n=e[1];return r in t&&typeof n==typeof t[r]}))},e.toBigNumber=function(t){return Array.isArray(t)?t.map(function(t){return new e(t)}):new e(t)},e.toBigNumberJs=function(t){return d.isBigNumber(t)?t:t instanceof e?t.bn:new d(t)},e._toLength=function(e,t){return new Array(e).fill("0",0,e).concat(t.split("")).slice(-e).join("")},e.MAX_VALUE=new e("9223372036854775807"),e.MIN_VALUE=new e("-9223372036854775808"),e.MAX_UNSIGNED_VALUE=new e("18446744073709551615"),e.config=new O,e}(),function(e){!function(e){e[e.ROUND_UP=0]="ROUND_UP",e[e.ROUND_DOWN=1]="ROUND_DOWN",e[e.ROUND_CEIL=2]="ROUND_CEIL",e[e.ROUND_FLOOR=3]="ROUND_FLOOR",e[e.ROUND_HALF_UP=4]="ROUND_HALF_UP",e[e.ROUND_HALF_DOWN=5]="ROUND_HALF_DOWN",e[e.ROUND_HALF_EVEN=6]="ROUND_HALF_EVEN",e[e.ROUND_HALF_CEIL=7]="ROUND_HALF_CEIL",e[e.ROUND_HALF_FLOOR=8]="ROUND_HALF_FLOOR"}(e.ROUND_MODE||(e.ROUND_MODE={}))}(e.BigNumber||(e.BigNumber={}));var v=e.BigNumber;e.default=v,Object.defineProperty(e,"__esModule",{value:!0})});


/***/ }),

/***/ "./node_modules/node-fetch/browser.js":
/*!********************************************!*\
  !*** ./node_modules/node-fetch/browser.js ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// ref: https://github.com/tc39/proposal-global
var getGlobal = function () {
	// the only reliable means to get the global object is
	// `Function('return this')()`
	// However, this causes CSP violations in Chrome apps.
	if (typeof self !== 'undefined') { return self; }
	if (typeof window !== 'undefined') { return window; }
	if (typeof global !== 'undefined') { return global; }
	throw new Error('unable to locate global object');
}

var global = getGlobal();

module.exports = exports = global.fetch;

// Needed for TypeScript and Webpack.
exports.default = global.fetch.bind(global);

exports.Headers = global.Headers;
exports.Request = global.Request;
exports.Response = global.Response;

/***/ }),

/***/ "./node_modules/typed-ts-events/dist/EventEmitter.js":
/*!***********************************************************!*\
  !*** ./node_modules/typed-ts-events/dist/EventEmitter.js ***!
  \***********************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var EventEmitter = /** @class */ (function () {
    function EventEmitter() {
        this._events = Object.create(null);
    }
    EventEmitter.prototype.hasListeners = function (eventName) {
        return !!(this._events[eventName] && this._events[eventName].length);
    };
    EventEmitter.prototype.getActiveEvents = function () {
        var _this = this;
        return Object.keys(this._events).filter(function (name) { return _this.hasListeners(name); });
    };
    EventEmitter.prototype.trigger = function (eventName, params) {
        if (this._events[eventName]) {
            this._events[eventName] = this._events[eventName].filter(function (data) {
                try {
                    data.handler.call(data.context, params);
                }
                catch (e) {
                }
                return !data.once;
            });
            if (!this._events[eventName].length) {
                delete this._events[eventName];
            }
        }
    };
    EventEmitter.prototype.on = function (eventName, handler, context) {
        this._on(eventName, handler, context, false);
    };
    EventEmitter.prototype.once = function (eventName, handler, context) {
        this._on(eventName, handler, context, true);
    };
    EventEmitter.prototype.off = function (arg1, arg2) {
        var _this = this;
        var eventName = typeof arg1 === 'string' ? arg1 : null;
        var handler = typeof arg2 === 'function' ? arg2 : typeof arg1 === 'function' ? arg1 : null;
        if (!eventName) {
            Object.keys(this._events).forEach(function (eventName) {
                _this.off(eventName, handler);
            });
            return void 0;
        }
        if (!handler) {
            delete this._events[eventName];
            return void 0;
        }
        if (eventName in this._events) {
            this._events[eventName] = this._events[eventName].filter(function (item) { return item.handler !== handler; });
        }
    };
    EventEmitter.prototype._on = function (eventName, handler, context, once) {
        if (!this._events[eventName]) {
            this._events[eventName] = [];
        }
        this._events[eventName].push({ handler: handler, context: context, once: once });
    };
    return EventEmitter;
}());
exports.EventEmitter = EventEmitter;


/***/ }),

/***/ "./node_modules/typed-ts-events/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/typed-ts-events/dist/index.js ***!
  \****************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
exports.__esModule = true;
__export(__webpack_require__(/*! ./EventEmitter */ "./node_modules/typed-ts-events/dist/EventEmitter.js"));


/***/ }),

/***/ "./src/api-node/activation/index.ts":
/*!******************************************!*\
  !*** ./src/api-node/activation/index.ts ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var request_1 = __importDefault(__webpack_require__(/*! ../../tools/request */ "./src/tools/request.ts"));
/**
 * GET /activation/status
 * Status
 * @param base
 */
function fetchActivationStatus(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: 'activation/status',
        options: options
    });
}
exports.fetchActivationStatus = fetchActivationStatus;


/***/ }),

/***/ "./src/api-node/addresses/index.ts":
/*!*****************************************!*\
  !*** ./src/api-node/addresses/index.ts ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var request_1 = __importDefault(__webpack_require__(/*! ../../tools/request */ "./src/tools/request.ts"));
var query_1 = __importDefault(__webpack_require__(/*! ../../tools/query */ "./src/tools/query.ts"));
function fetchDataKey(base, address, key, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/addresses/data/" + address + "/" + encodeURIComponent(key),
        options: options
    });
}
exports.fetchDataKey = fetchDataKey;
function fetchScriptInfoMeta(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/addresses/scriptInfo/" + address + "/meta",
        options: options
    });
}
exports.fetchScriptInfoMeta = fetchScriptInfoMeta;
function fetchBalanceDetails(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/addresses/balance/details/" + address,
        options: options
    });
}
exports.fetchBalanceDetails = fetchBalanceDetails;
function fetchBalanceConfirmations(base, address, confirmations, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/addresses/balance/" + address + "/" + confirmations,
        options: options
    });
}
exports.fetchBalanceConfirmations = fetchBalanceConfirmations;
function fetchScriptInfo(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/addresses/scriptInfo/" + address,
        options: options
    });
}
exports.fetchScriptInfo = fetchScriptInfo;
function data(base, address, params, options) {
    if (params === void 0) { params = Object.create(null); }
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/addresses/data/" + address + query_1["default"](params),
        options: options
    });
}
exports.data = data;
function fetchValidate(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/addresses/validate/" + address,
        options: options
    });
}
exports.fetchValidate = fetchValidate;
function fetchBalance(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/addresses/balance/" + address,
        options: options
    });
}
exports.fetchBalance = fetchBalance;
function fetchEffectiveBalanceConfirmations(base, address, confirmations, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/addresses/effectiveBalance/" + address + "/" + confirmations,
        options: options
    });
}
exports.fetchEffectiveBalanceConfirmations = fetchEffectiveBalanceConfirmations;
function fetchEffectiveBalance(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/addresses/effectiveBalance/" + address,
        options: options
    });
}
exports.fetchEffectiveBalance = fetchEffectiveBalance;
function fetchSeq(base, from, to, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/addresses/seq/" + from + "/" + to,
        options: options
    });
}
exports.fetchSeq = fetchSeq;
function fetchSeed(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/addresses/seed/" + address,
        options: options
    });
}
exports.fetchSeed = fetchSeed;
function fetchPublicKey(base, publicKey, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/addresses/publicKey/" + publicKey,
        options: options
    });
}
exports.fetchPublicKey = fetchPublicKey;
function fetchAddresses(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: '/addresses',
        options: options
    });
}
exports.fetchAddresses = fetchAddresses;


/***/ }),

/***/ "./src/api-node/alias/index.ts":
/*!*************************************!*\
  !*** ./src/api-node/alias/index.ts ***!
  \*************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var request_1 = __importDefault(__webpack_require__(/*! ../../tools/request */ "./src/tools/request.ts"));
function fetchByAlias(base, alias, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/alias/by-alias/" + alias,
        options: options
    });
}
exports.fetchByAlias = fetchByAlias;
function fetchByAddress(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/alias/by-address/" + address,
        options: options
    });
}
exports.fetchByAddress = fetchByAddress;


/***/ }),

/***/ "./src/api-node/assets/index.ts":
/*!**************************************!*\
  !*** ./src/api-node/assets/index.ts ***!
  \**************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var request_1 = __importDefault(__webpack_require__(/*! ../../tools/request */ "./src/tools/request.ts"));
var utils_1 = __webpack_require__(/*! ../../tools/utils */ "./src/tools/utils.ts");
function fetchDetails(base, assetId, options) {
    if (options === void 0) { options = Object.create(null); }
    var isOnce = !Array.isArray(assetId);
    return Promise.all(utils_1.toArray(assetId).map(function (id) { return request_1["default"]({ base: base, url: "/assets/details/" + id, options: options }); }))
        .then(function (list) { return isOnce ? list[0] : list; });
}
exports.fetchDetails = fetchDetails;
/**
 * GET /assets/details
 * Provides detailed information about the given assets
 */
function fetchAssetsDetails(base, assetIds, options) {
    if (options === void 0) { options = Object.create(null); }
    var params = assetIds
        .map(function (assetId) { return "id=" + assetId; })
        .join('&');
    var query = assetIds.length ? "?" + params : '';
    return request_1["default"]({ base: base, url: "/assets/details" + query, options: options });
}
exports.fetchAssetsDetails = fetchAssetsDetails;
function fetchAssetDistribution(base, assetId, height, limit, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({ base: base, url: "/assets/" + assetId + "/distribution/" + height + "/limit/" + limit, options: options });
}
exports.fetchAssetDistribution = fetchAssetDistribution;
/**
 * TODO
 * GET /assets/{assetId}/distribution
 * Asset balance distribution
 */
function fetchAssetsAddressLimit(base, address, limit, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({ base: base, url: "assets/nft/" + address + "/limit/" + limit, options: options });
}
exports.fetchAssetsAddressLimit = fetchAssetsAddressLimit;
function fetchAssetsBalance(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({ base: base, url: "/assets/balance/" + address, options: options });
}
exports.fetchAssetsBalance = fetchAssetsBalance;
function fetchBalanceAddressAssetId(base, address, assetId, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({ base: base, url: "/assets/balance/" + address + "/" + assetId, options: options });
}
exports.fetchBalanceAddressAssetId = fetchBalanceAddressAssetId;


/***/ }),

/***/ "./src/api-node/blocks/index.ts":
/*!**************************************!*\
  !*** ./src/api-node/blocks/index.ts ***!
  \**************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var request_1 = __importDefault(__webpack_require__(/*! ../../tools/request */ "./src/tools/request.ts"));
/**
 * GET /blocks/headers/seq/{from}/{to}
 * Get block headers at specified heights
 * @param base
 * @param from
 * @param to
 */
function fetchHeadersSeq(base, from, to, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/blocks/headers/seq/" + from + "/" + to,
        options: options
    });
}
exports.fetchHeadersSeq = fetchHeadersSeq;
/**
 * GET /blocks/headers/last
 * Last block header
 * @param base
 */
function fetchHeadersLast(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: '/blocks/headers/last',
        options: options
    });
}
exports.fetchHeadersLast = fetchHeadersLast;
/**
 * GET /blocks/height/{id}
 * Height of a block by its id
 * @param base
 * @param id
 */
function fetchHeightById(base, id, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/blocks/height/" + id,
        options: options
    });
}
exports.fetchHeightById = fetchHeightById;
/**
 * GET /blocks/headers/at/{height}
 * Block header at height
 * @param base
 * @param height
 */
function fetchHeadersAt(base, height, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/blocks/headers/at/" + height,
        options: options
    });
}
exports.fetchHeadersAt = fetchHeadersAt;
/**
 * GET /blocks/at/{height}
 * Get block at specified height
 * @param base
 * @param height
 */
function BlockAt(base, height, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/blocks/at/" + height,
        options: options
    });
}
exports.BlockAt = BlockAt;
/**
 * GET /blocks/seq/{from}/{to}
 * Block range
 * @param base
 * @param from
 * @param to
 */
function fetchSeq(base, from, to, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/blocks/seq/" + from + "/" + to,
        options: options
    });
}
exports.fetchSeq = fetchSeq;
/**
 * GET /blocks/signature/{signature}
 * Get block by its signature
 * @param base
 * @param signature
 */
function fetchBlockBySignature(base, signature, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/blocks/signature/" + signature,
        options: options
    });
}
exports.fetchBlockBySignature = fetchBlockBySignature;
/**
 * GET /blocks/first
 * Get genesis block
 * @param base
 */
function fetchFirst(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/blocks/first",
        options: options
    });
}
exports.fetchFirst = fetchFirst;
/**
 * /blocks/address/{address}/{from}/{to}
 * Get list of blocks generated by specified address
 * @param base
 * @param address
 * @param from
 * @param to
 */
function fetchBlocksByAddress(base, address, from, to, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/blocks/address/" + address + "/" + from + "/" + to,
        options: options
    });
}
exports.fetchBlocksByAddress = fetchBlocksByAddress;
/**
 * GET /blocks/last
 * Last block
 * @param base
 */
function fetchLast(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: '/blocks/last',
        options: options
    });
}
exports.fetchLast = fetchLast;
/**
 * GET /blocks/delay/{id}/{blockNum}
 * Average delay in milliseconds between last blockNum blocks starting from block with id
 * @param base
 * @param id
 * @param blockNum
 */
function fetchDelay(base, id, blockNum, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/blocks/delay/" + id + "/" + blockNum,
        options: options
    });
}
exports.fetchDelay = fetchDelay;
/**
 * GET /blocks/height
 * @param base
 */
function fetchHeight(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: '/blocks/height',
        options: options
    });
}
exports.fetchHeight = fetchHeight;


/***/ }),

/***/ "./src/api-node/consensus/index.ts":
/*!*****************************************!*\
  !*** ./src/api-node/consensus/index.ts ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var request_1 = __importDefault(__webpack_require__(/*! ../../tools/request */ "./src/tools/request.ts"));
/**
 * GET /consensus/generatingbalance/{address}
 * Generating balance
 * @param base
 * @param address
 */
function fetchGeneratingBalance(base, address) {
    return request_1["default"]({ base: base, url: "/consensus/generatingbalance/" + address });
}
exports.fetchGeneratingBalance = fetchGeneratingBalance;
/**
 * GET /consensus/basetarget
 * Base target last
 * @param base
 */
function fetchBasetarget(base) {
    return request_1["default"]({ base: base, url: '/consensus/basetarget' });
}
exports.fetchBasetarget = fetchBasetarget;
/**
 * GET /consensus/algo
 * Consensus algo
 * @param base
 */
function fetchConsensusAlgo(base) {
    return request_1["default"]({ base: base, url: '/consensus/algo' });
}
exports.fetchConsensusAlgo = fetchConsensusAlgo;
/**
 * GET /consensus/generationsignature/{blockId}
 * Generation signature
 * @param base
 * @param blockId
 */
function fetchGenerationSignatureBlockId(base, blockId, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({ base: base, url: "/consensus/generationsignature/" + blockId, options: options });
}
exports.fetchGenerationSignatureBlockId = fetchGenerationSignatureBlockId;
/**
 * GET /consensus/basetarget/{blockId}
 * Base target
 * @param base
 * @param blockId
 */
function fetchBasetargetBlockId(base, blockId, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({ base: base, url: "/consensus/basetarget/" + blockId, options: options });
}
exports.fetchBasetargetBlockId = fetchBasetargetBlockId;


/***/ }),

/***/ "./src/api-node/debug/index.ts":
/*!*************************************!*\
  !*** ./src/api-node/debug/index.ts ***!
  \*************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var request_1 = __importDefault(__webpack_require__(/*! ../../tools/request */ "./src/tools/request.ts"));
var query_1 = __importDefault(__webpack_require__(/*! ../../tools/query */ "./src/tools/query.ts"));
/**
 * Waves balance history
 * @param base
 * @param address
 */
function fetchBalanceHistory(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/debug/balances/history/" + address,
        options: options
    });
}
exports.fetchBalanceHistory = fetchBalanceHistory;
/**
 * Get list of transactions with state changes where specified address has been involved
 * @param base
 * @param address
 * @param limit
 * @param after
 */
function fetchStateChangesByAddress(base, address, limit, after, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/debug/stateChanges/address/" + address + "/limit/" + limit + query_1["default"]({ after: after }),
        options: options
    });
}
exports.fetchStateChangesByAddress = fetchStateChangesByAddress;
/**
 * Get invokeScript transaction state changes
 * @param base
 * @param txId
 */
function fetchStateChangesByTxId(base, txId, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/debug/stateChanges/info/" + txId,
        options: options
    });
}
exports.fetchStateChangesByTxId = fetchStateChangesByTxId;
// @TODO need API key:
// GET /debug/stateWaves/{height}
// POST /debug/rollback
// DELETE /debug/rollback-to/{id}
// GET /debug/portfolios/{address}
// GET /debug/minerInfo
// GET /debug/historyInfo
// GET /debug/historyInfo
// GET /debug/info
// POST /debug/validate
// GET /debug/blocks/{howMany}
// POST /debug/blacklist
// POST /debug/print
// GET /debug/state


/***/ }),

/***/ "./src/api-node/leasing/index.ts":
/*!***************************************!*\
  !*** ./src/api-node/leasing/index.ts ***!
  \***************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var request_1 = __importDefault(__webpack_require__(/*! ../../tools/request */ "./src/tools/request.ts"));
/**
 * GET /leasing/active/{address}
 * Get all active leases for an address
 */
function fetchActive(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({ base: base, url: "/leasing/active/" + address, options: options });
}
exports.fetchActive = fetchActive;


/***/ }),

/***/ "./src/api-node/node/index.ts":
/*!************************************!*\
  !*** ./src/api-node/node/index.ts ***!
  \************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var request_1 = __importDefault(__webpack_require__(/*! ../../tools/request */ "./src/tools/request.ts"));
// @TODO: When correct API key
// POST /node/stop
function fetchNodeStatus(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({ base: base, url: '/node/status', options: options });
}
exports.fetchNodeStatus = fetchNodeStatus;
function fetchNodeVersion(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({ base: base, url: '/node/version', options: options });
}
exports.fetchNodeVersion = fetchNodeVersion;


/***/ }),

/***/ "./src/api-node/peers/index.ts":
/*!*************************************!*\
  !*** ./src/api-node/peers/index.ts ***!
  \*************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var request_1 = __importDefault(__webpack_require__(/*! ../../tools/request */ "./src/tools/request.ts"));
/**
 * GET /peers/all
 * Peer list
 */
function fetchAll(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: '/peers/all',
        options: options
    });
}
exports.fetchAll = fetchAll;
/**
 * GET /peers/connected
 * Connected peers list
 */
function fetchConnected(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: '/peers/connected',
        options: options
    });
}
exports.fetchConnected = fetchConnected;
/**
 * GET /peers/blacklisted
 * Blacklisted peers list
 */
function fetchBlackListed(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: '/peers/blacklisted',
        options: options
    });
}
exports.fetchBlackListed = fetchBlackListed;
/**
 * GET /peers/suspended
 * Suspended peers list
 */
function fetchSuspended(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: '/peers/suspended',
        options: options
    });
}
exports.fetchSuspended = fetchSuspended;


/***/ }),

/***/ "./src/api-node/rewards/index.ts":
/*!***************************************!*\
  !*** ./src/api-node/rewards/index.ts ***!
  \***************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var request_1 = __importDefault(__webpack_require__(/*! ../../tools/request */ "./src/tools/request.ts"));
/**
 * GET /blockchain/rewards
 * Current reward status
 */
function fetchRewards(base, height, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: height ? "/blockchain/rewards/" + height : '/blockchain/rewards',
        options: options
    });
}
exports.fetchRewards = fetchRewards;


/***/ }),

/***/ "./src/api-node/transactions/index.ts":
/*!********************************************!*\
  !*** ./src/api-node/transactions/index.ts ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var constants_1 = __webpack_require__(/*! ../../constants */ "./src/constants.ts");
var blocks_1 = __webpack_require__(/*! ../blocks */ "./src/api-node/blocks/index.ts");
var request_1 = __importDefault(__webpack_require__(/*! ../../tools/request */ "./src/tools/request.ts"));
var query_1 = __importDefault(__webpack_require__(/*! ../../tools/query */ "./src/tools/query.ts"));
var utils_1 = __webpack_require__(/*! ../../tools/utils */ "./src/tools/utils.ts");
var stringify_1 = __importDefault(__webpack_require__(/*! ../../tools/stringify */ "./src/tools/stringify.ts"));
/**
 * GET /transactions/unconfirmed/size
 * Number of unconfirmed transactions
 */
function fetchUnconfirmedSize(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: '/transactions/unconfirmed/size',
        options: options
    });
}
exports.fetchUnconfirmedSize = fetchUnconfirmedSize;
// @TODO: when correct API key is received
/**
 * POST /transactions/sign/{signerAddress}
 * Sign a transaction with a non-default private key
 */
/**
* POST /transactions/calculateFee
* Calculate transaction fee
*/
function fetchCalculateFee(base, tx, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: '/transactions/calculateFee',
        options: utils_1.deepAssign(__assign({}, options), {
            method: 'POST',
            body: stringify_1["default"](tx),
            headers: {
                'Content-Type': 'application/json'
            }
        })
    });
}
exports.fetchCalculateFee = fetchCalculateFee;
/**
 * GET /transactions/unconfirmed
 * Unconfirmed transactions
 */
function fetchUnconfirmed(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: '/transactions/unconfirmed',
        options: options
    });
}
exports.fetchUnconfirmed = fetchUnconfirmed;
/**
 * Ð¡Ð¿Ð¸ÑÐ¾Ðº ÑÑÐ°Ð½Ð·Ð°ÐºÑÐ¸Ð¹ Ð¿Ð¾ Ð°Ð´ÑÐµÑÑ
 * @param address
 * @param limit      Ð¼Ð°ÐºÑÐ¸Ð¼Ð°Ð»ÑÐ½Ð¾Ðµ ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ ÑÑÐ°Ð½Ð·Ð°ÐºÑÐ¸Ð¹ Ð² ÑÐµÐ·ÑÐ»ÑÑÐ°ÑÐµ
 * @param after      Ð¸ÑÐºÐ°ÑÑ ÑÑÐ°Ð½Ð·Ð°ÐºÑÐ¸Ð¸ Ð¿Ð¾ÑÐ»Ðµ ID ÑÐºÐ°Ð·Ð°Ð½Ð½Ð¾Ð³Ð¾ Ð² after
 * @param retry      ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ Ð¿Ð¾Ð¿ÑÑÐ¾Ðº Ð½Ð° Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ðµ Ð·Ð°Ð¿ÑÐ¾ÑÐ°
 */
function fetchTransactions(base, address, limit, after, retry, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/transactions/address/" + address + "/limit/" + limit + query_1["default"]({ after: after }),
        options: options
    }).then(function (_a) {
        var list = _a[0];
        return list;
    });
}
exports.fetchTransactions = fetchTransactions;
/**
 * GET /transactions/unconfirmed/info/{id}
 * Unconfirmed transaction info
 */
function fetchUnconfirmedInfo(base, id, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base,
        url: "/transactions/unconfirmed/info/" + id,
        options: options
    });
}
exports.fetchUnconfirmedInfo = fetchUnconfirmedInfo;
// @TODO when correct API key is received
/**
 * POST /transactions/sign
 * Sign a transaction
 */
/**
 * GET /transactions/info/{id}
 * Transaction info
 */
function fetchInfo(base, id, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({ base: base, url: "/transactions/info/" + id, options: options });
}
exports.fetchInfo = fetchInfo;
function fetchStatus(base, list) {
    var DEFAULT_STATUS = {
        id: '',
        confirmations: -1,
        height: -1,
        inUTX: false,
        status: constants_1.TRANSACTION_STATUSES.NOT_FOUND
    };
    var loadAllTxInfo = list.map(function (id) {
        return fetchUnconfirmedInfo(base, id)
            .then(function () { return (__assign(__assign({}, DEFAULT_STATUS), { id: id, status: constants_1.TRANSACTION_STATUSES.UNCONFIRMED, inUTX: true })); })["catch"](function () { return fetchInfo(base, id)
            .then(function (tx) { return (__assign(__assign({}, DEFAULT_STATUS), { id: id, status: constants_1.TRANSACTION_STATUSES.IN_BLOCKCHAIN, height: tx.height, applicationStatus: tx.applicationStatus })); }); })["catch"](function () { return (__assign(__assign({}, DEFAULT_STATUS), { id: id })); });
    });
    return Promise.all([
        blocks_1.fetchHeight(base),
        Promise.all(loadAllTxInfo)
    ]).then(function (_a) {
        var height = _a[0].height, statuses = _a[1];
        return ({
            height: height,
            statuses: statuses.map(function (item) { return (__assign(__assign({}, item), { confirmations: item.status === constants_1.TRANSACTION_STATUSES.IN_BLOCKCHAIN ? height - item.height : item.confirmations })); })
        });
    });
}
exports.fetchStatus = fetchStatus;
function broadcast(base, tx, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1["default"]({
        base: base, url: '/transactions/broadcast',
        options: utils_1.deepAssign(__assign({}, options), {
            method: 'POST',
            body: stringify_1["default"](tx),
            headers: {
                'Content-Type': 'application/json'
            }
        })
    });
}
exports.broadcast = broadcast;


/***/ }),

/***/ "./src/api-node/utils/index.ts":
/*!*************************************!*\
  !*** ./src/api-node/utils/index.ts ***!
  \*************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var request_1 = __importDefault(__webpack_require__(/*! ../../tools/request */ "./src/tools/request.ts"));
var stringify_1 = __importDefault(__webpack_require__(/*! ../../tools/stringify */ "./src/tools/stringify.ts"));
/**
 * GET /utils/seed
 * Generate random seed
 */
function fetchSeed(base, length) {
    return request_1["default"]({
        base: base,
        url: "/utils/seed" + (length ? "/" + length : '')
    });
}
exports.fetchSeed = fetchSeed;
/**
 * POST /utils/script/compileCode
 * Compiles string code to base64 script representation
 */
function fetchCompileCode(base, body) {
    return request_1["default"]({
        base: base,
        url: '/utils/script/compileCode',
        options: {
            method: 'POST',
            body: body,
            headers: {
                'Content-Type': 'application/json'
            }
        }
    });
}
exports.fetchCompileCode = fetchCompileCode;
/**
 * POST /utils/script/compileWithImports
 * Compiles string code with imports to base64 script representation
 */
function fetchCompileWithImports(base, body) {
    return request_1["default"]({
        base: base,
        url: '/utils/script/compileWithImports',
        options: {
            method: 'POST',
            body: stringify_1["default"](body),
            headers: {
                'Content-Type': 'application/json'
            }
        }
    });
}
exports.fetchCompileWithImports = fetchCompileWithImports;
/**
 * POST /utils/script/estimate
 * Estimates compiled code in Base64 representation
 */
function fetchEstimate(base, body) {
    return request_1["default"]({
        base: base,
        url: '/utils/script/estimate',
        options: {
            method: 'POST',
            body: body,
            headers: {
                'Content-Type': 'application/json'
            }
        }
    });
}
exports.fetchEstimate = fetchEstimate;
/**
 * POST /utils/transactionSerialize
 * Serialize transaction
 */
function fetchTransactionSerialize(base, body) {
    return request_1["default"]({
        base: base,
        url: '/utils/transactionSerialize',
        options: {
            method: 'POST',
            body: stringify_1["default"](body),
            headers: {
                'Content-Type': 'application/json'
            }
        }
    });
}
exports.fetchTransactionSerialize = fetchTransactionSerialize;
/**
 * POST /utils/hash/secure
 * Return SecureCryptographicHash of specified message
 */
function fetchHashSecure(base, body) {
    return request_1["default"]({
        base: base,
        url: '/utils/hash/secure',
        options: {
            method: 'POST',
            body: body,
            headers: {
                'Content-Type': 'application/json'
            }
        }
    });
}
exports.fetchHashSecure = fetchHashSecure;
/**
 * POST /utils/hash/fast
 * Return FastCryptographicHash of specified message
 */
function fetchHashFast(base, body) {
    return request_1["default"]({
        base: base,
        url: '/utils/hash/fast',
        options: {
            method: 'POST',
            body: body,
            headers: {
                'Content-Type': 'application/json'
            }
        }
    });
}
exports.fetchHashFast = fetchHashFast;
/**
 * POST /utils/script/meta
 * Account's script meta
 */
function fetchScriptMeta(base, body) {
    return request_1["default"]({
        base: base,
        url: '/utils/script/meta',
        options: {
            method: 'POST',
            body: body,
            headers: {
                'Content-Type': 'application/json'
            }
        }
    });
}
exports.fetchScriptMeta = fetchScriptMeta;
/**
 * POST /utils/script/decompile
 * Decompiles base64 script representation to string code
 */
function fetchScriptDecompile(base, body) {
    return request_1["default"]({
        base: base,
        url: '/utils/script/decompile',
        options: {
            method: 'POST',
            body: body,
            headers: {
                'Content-Type': 'application/json'
            }
        }
    });
}
exports.fetchScriptDecompile = fetchScriptDecompile;
/**
 * POST /utils/sign/{privateKey}
 * Return FastCryptographicHash of specified message
 */
function fetchSignPrivateKey(base, privateKey, body) {
    return request_1["default"]({
        base: base,
        url: "/utils/sign/" + privateKey,
        options: {
            method: 'POST',
            body: body,
            headers: {
                'Content-Type': 'application/json'
            }
        }
    });
}
exports.fetchSignPrivateKey = fetchSignPrivateKey;
/**
 * GET /utils/time
 * Current Node time (UTC)
 */
function fetchNodeTime(base) {
    return request_1["default"]({
        base: base,
        url: '/utils/time'
    });
}
exports.fetchNodeTime = fetchNodeTime;


/***/ }),

/***/ "./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
exports.TYPE_MAP = {
    3: 'issue',
    4: 'transfer',
    5: 'reissue',
    6: 'burn',
    7: 'exchange',
    8: 'lease',
    9: 'cancelLease',
    10: 'alias',
    11: 'massTransfer',
    12: 'data',
    13: 'setScript',
    14: 'sponsorship',
    15: 'setAssetScript',
    16: 'invoke'
};
exports.NAME_MAP = {
    'issue': 3,
    'transfer': 4,
    'reissue': 5,
    'burn': 6,
    'exchange': 7,
    'lease': 8,
    'cancelLease': 9,
    'alias': 10,
    'massTransfer': 11,
    'data': 12,
    'setScript': 13,
    'sponsorship': 14,
    'setAssetScript': 15,
    'invoke': 16
};
exports.TRANSACTION_STATUSES = {
    IN_BLOCKCHAIN: 'in_blockchain',
    UNCONFIRMED: 'unconfirmed',
    NOT_FOUND: 'not_found'
};


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var addressesModule = __importStar(__webpack_require__(/*! ./api-node/addresses */ "./src/api-node/addresses/index.ts"));
var blocksModule = __importStar(__webpack_require__(/*! ./api-node/blocks */ "./src/api-node/blocks/index.ts"));
var transactionsModule = __importStar(__webpack_require__(/*! ./api-node/transactions */ "./src/api-node/transactions/index.ts"));
var leasingModule = __importStar(__webpack_require__(/*! ./api-node/leasing */ "./src/api-node/leasing/index.ts"));
var peersModule = __importStar(__webpack_require__(/*! ./api-node/peers */ "./src/api-node/peers/index.ts"));
var rewardsModule = __importStar(__webpack_require__(/*! ./api-node/rewards */ "./src/api-node/rewards/index.ts"));
var utilsModule = __importStar(__webpack_require__(/*! ./api-node/utils */ "./src/api-node/utils/index.ts"));
var debugModule = __importStar(__webpack_require__(/*! ./api-node/debug */ "./src/api-node/debug/index.ts"));
var aliasModule = __importStar(__webpack_require__(/*! ./api-node/alias */ "./src/api-node/alias/index.ts"));
var consensusModule = __importStar(__webpack_require__(/*! ./api-node/consensus */ "./src/api-node/consensus/index.ts"));
var activationModule = __importStar(__webpack_require__(/*! ./api-node/activation */ "./src/api-node/activation/index.ts"));
var nodeModule = __importStar(__webpack_require__(/*! ./api-node/node */ "./src/api-node/node/index.ts"));
var assetsModule = __importStar(__webpack_require__(/*! ./api-node/assets */ "./src/api-node/assets/index.ts"));
var query_1 = __importDefault(__webpack_require__(/*! ./tools/query */ "./src/tools/query.ts"));
var resolve_1 = __importDefault(__webpack_require__(/*! ./tools/resolve */ "./src/tools/resolve.ts"));
var request_1 = __importDefault(__webpack_require__(/*! ./tools/request */ "./src/tools/request.ts"));
var broadcast_1 = __importDefault(__webpack_require__(/*! ./tools/transactions/broadcast */ "./src/tools/transactions/broadcast.ts"));
var getAssetsByTransaction_1 = __importDefault(__webpack_require__(/*! ./tools/adresses/getAssetsByTransaction */ "./src/tools/adresses/getAssetsByTransaction.ts"));
var getAssetIdListByTx_1 = __importDefault(__webpack_require__(/*! ./tools/adresses/getAssetIdListByTx */ "./src/tools/adresses/getAssetIdListByTx.ts"));
var getTransactionsWithAssets_1 = __importDefault(__webpack_require__(/*! ./tools/adresses/getTransactionsWithAssets */ "./src/tools/adresses/getTransactionsWithAssets.ts"));
var availableSponsoredBalances_1 = __importDefault(__webpack_require__(/*! ./tools/adresses/availableSponsoredBalances */ "./src/tools/adresses/availableSponsoredBalances.ts"));
var wait_1 = __importDefault(__webpack_require__(/*! ./tools/transactions/wait */ "./src/tools/transactions/wait.ts"));
var parse_1 = __importDefault(__webpack_require__(/*! ./tools/parse */ "./src/tools/parse.ts"));
var getNetworkByte_1 = __importDefault(__webpack_require__(/*! ./tools/blocks/getNetworkByte */ "./src/tools/blocks/getNetworkByte.ts"));
var getNetworkCode_1 = __importDefault(__webpack_require__(/*! ./tools/blocks/getNetworkCode */ "./src/tools/blocks/getNetworkCode.ts"));
var watch_1 = __importDefault(__webpack_require__(/*! ./tools/adresses/watch */ "./src/tools/adresses/watch.ts"));
var toolsUtilsModule = __importStar(__webpack_require__(/*! ./tools/utils */ "./src/tools/utils.ts"));
function create(base) {
    var addresses = wrapRecord(base, addressesModule);
    var blocks = wrapRecord(base, blocksModule);
    var transactions = wrapRecord(base, transactionsModule);
    var leasing = wrapRecord(base, leasingModule);
    var peers = wrapRecord(base, peersModule);
    var rewards = wrapRecord(base, rewardsModule);
    var utils = wrapRecord(base, utilsModule);
    var debug = wrapRecord(base, debugModule);
    var alias = wrapRecord(base, aliasModule);
    var consensus = wrapRecord(base, consensusModule);
    var activation = wrapRecord(base, activationModule);
    var node = wrapRecord(base, nodeModule);
    var assets = wrapRecord(base, assetsModule);
    var tools = {
        transactions: {
            broadcast: wrapRequest(base, broadcast_1["default"]),
            wait: wrapRequest(base, wait_1["default"])
        },
        blocks: {
            getNetworkByte: wrapRequest(base, getNetworkByte_1["default"]),
            getNetworkCode: wrapRequest(base, getNetworkCode_1["default"])
        },
        addresses: {
            createWatch: wrapRequest(base, watch_1["default"]),
            getAssetsByTransaction: wrapRequest(base, getAssetsByTransaction_1["default"]),
            getAssetIdListByTx: getAssetIdListByTx_1["default"],
            getTransactionsWithAssets: wrapRequest(base, getTransactionsWithAssets_1["default"]),
            availableSponsoredBalances: wrapRequest(base, availableSponsoredBalances_1["default"])
        },
        utils: toolsUtilsModule,
        query: query_1["default"],
        resolve: resolve_1["default"],
        request: request_1["default"],
        parse: parse_1["default"]
    };
    return {
        addresses: addresses,
        blocks: blocks,
        transactions: transactions,
        leasing: leasing,
        tools: tools,
        peers: peers,
        rewards: rewards,
        utils: utils,
        debug: debug,
        alias: alias,
        consensus: consensus,
        activation: activation,
        node: node,
        assets: assets
    };
}
exports.create = create;
exports["default"] = create;
function wrapRecord(base, hash) {
    return Object.keys(hash).reduce(function (acc, methodName) {
        acc[methodName] = wrapRequest(base, hash[methodName]);
        return acc;
    }, {});
}
function wrapRequest(base, callback) {
    return callback.bind(null, base);
}


/***/ }),

/***/ "./src/tools/adresses/availableSponsoredBalances.ts":
/*!**********************************************************!*\
  !*** ./src/tools/adresses/availableSponsoredBalances.ts ***!
  \**********************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var bignumber_1 = __webpack_require__(/*! @waves/bignumber */ "./node_modules/@waves/bignumber/dist/bignumber.umd.min.js");
var assets_1 = __webpack_require__(/*! ../../api-node/assets */ "./src/api-node/assets/index.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/tools/utils.ts");
function default_1(base, address, wavesFee) {
    return assets_1.fetchAssetsBalance(base, address).then(utils_1.pipe(utils_1.prop('balances'), utils_1.filter(canBeSponsor(wavesFee)), utils_1.map(currentFee(wavesFee))));
}
exports["default"] = default_1;
function canBeSponsor(wavesFee) {
    return function (balance) { return (balance.minSponsoredAssetFee
        && bignumber_1.BigNumber.toBigNumber(balance.sponsorBalance || 0)
            .gte(wavesFee)
        && bignumber_1.BigNumber.toBigNumber(wavesFee)
            .div(0.001 * Math.pow(10, 8))
            .mul(balance.minSponsoredAssetFee)
            .lte(balance.balance)) || false; };
}
function currentFee(wavesFee) {
    var count = bignumber_1.BigNumber.toBigNumber(wavesFee)
        .div(0.001 * Math.pow(10, 8));
    return function (balance) { return ({
        assetId: balance.assetId,
        wavesFee: wavesFee,
        assetFee: bignumber_1.BigNumber.toBigNumber(balance.minSponsoredAssetFee)
            .mul(count)
            .toFixed()
    }); };
}


/***/ }),

/***/ "./src/tools/adresses/getAssetIdListByTx.ts":
/*!**************************************************!*\
  !*** ./src/tools/adresses/getAssetIdListByTx.ts ***!
  \**************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var _a;
exports.__esModule = true;
var utils_1 = __webpack_require__(/*! ../utils */ "./src/tools/utils.ts");
var constants_1 = __webpack_require__(/*! ../../constants */ "./src/constants.ts");
var getAssetIdList = utils_1.switchTransactionByType((_a = {},
    _a[constants_1.NAME_MAP.transfer] = function (tx) { return [tx.assetId, tx.feeAssetId]; },
    _a[constants_1.NAME_MAP.burn] = function (tx) { return [tx.assetId]; },
    _a[constants_1.NAME_MAP.reissue] = function (tx) { return [tx.assetId]; },
    _a[constants_1.NAME_MAP.exchange] = function (tx) { return [tx.buyOrder.assetPair.amountAsset, tx.buyOrder.assetPair.priceAsset, tx.buyOrder.matcherFeeAssetId, tx.sellOrder.matcherFeeAssetId]; },
    _a[constants_1.NAME_MAP.massTransfer] = function (tx) { return [tx.assetId]; },
    _a[constants_1.NAME_MAP.setAssetScript] = function (tx) { return [tx.assetId]; },
    _a[constants_1.NAME_MAP.sponsorship] = function (tx) { return [tx.assetId]; },
    _a[constants_1.NAME_MAP.invoke] = function (tx) { return __spreadArrays((tx.payment || []).map(utils_1.prop('assetId')), [tx.feeAssetId]); },
    _a));
function default_1(tx) {
    var idList = utils_1.toArray(tx).reduce(function (acc, tx) { return acc.concat(getAssetIdList(tx) || []); }, []);
    return utils_1.pipe(utils_1.filter(Boolean), utils_1.uniq)(idList);
}
exports["default"] = default_1;


/***/ }),

/***/ "./src/tools/adresses/getAssetsByTransaction.ts":
/*!******************************************************!*\
  !*** ./src/tools/adresses/getAssetsByTransaction.ts ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var assets_1 = __webpack_require__(/*! ../../api-node/assets */ "./src/api-node/assets/index.ts");
var getAssetIdListByTx_1 = __importDefault(__webpack_require__(/*! ./getAssetIdListByTx */ "./src/tools/adresses/getAssetIdListByTx.ts"));
var utils_1 = __webpack_require__(/*! ../utils */ "./src/tools/utils.ts");
function default_1(base, tx) {
    return assets_1.fetchDetails(base, getAssetIdListByTx_1["default"](tx))
        .then(function (list) { return utils_1.indexBy(utils_1.prop('assetId'), list); });
}
exports["default"] = default_1;


/***/ }),

/***/ "./src/tools/adresses/getTransactionsWithAssets.ts":
/*!*********************************************************!*\
  !*** ./src/tools/adresses/getTransactionsWithAssets.ts ***!
  \*********************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var transactions_1 = __webpack_require__(/*! ../../api-node/transactions */ "./src/api-node/transactions/index.ts");
var getAssetsByTransaction_1 = __importDefault(__webpack_require__(/*! ./getAssetsByTransaction */ "./src/tools/adresses/getAssetsByTransaction.ts"));
function default_1(base, address, limit, after) {
    return transactions_1.fetchTransactions(base, address, limit, after)
        .then(function (transactions) { return getAssetsByTransaction_1["default"](base, transactions).then(function (assets) { return ({ transactions: transactions, assets: assets }); }); });
}
exports["default"] = default_1;


/***/ }),

/***/ "./src/tools/adresses/watch.ts":
/*!*************************************!*\
  !*** ./src/tools/adresses/watch.ts ***!
  \*************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
var transactions_1 = __webpack_require__(/*! ../../api-node/transactions */ "./src/api-node/transactions/index.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/tools/utils.ts");
var typed_ts_events_1 = __webpack_require__(/*! typed-ts-events */ "./node_modules/typed-ts-events/dist/index.js");
var Watch = /** @class */ (function () {
    function Watch(base, address, tx, interval) {
        var _a, _b;
        this._emitter = new typed_ts_events_1.EventEmitter();
        this._timer = null;
        this.address = address;
        this._interval = interval || 1000;
        this._base = base;
        this._lastBlock = {
            lastId: ((_a = tx) === null || _a === void 0 ? void 0 : _a.id) || '',
            height: ((_b = tx) === null || _b === void 0 ? void 0 : _b.height) || 0,
            transactions: tx ? [tx] : []
        };
        this._addTimeout();
    }
    Watch.prototype.on = function (event, handler) {
        this._emitter.on(event, handler);
    };
    Watch.prototype.once = function (event, handler) {
        this._emitter.once(event, handler);
    };
    Watch.prototype.off = function (event, handler) {
        this._emitter.off(event, handler);
    };
    Watch.prototype._run = function () {
        var _this = this;
        if (this._timer) {
            clearTimeout(this._timer);
        }
        var onError = function () { return _this._addTimeout(); };
        transactions_1.fetchTransactions(this._base, this.address, 1)
            .then(function (_a) {
            var tx = _a[0];
            if (!tx) {
                _this._addTimeout();
                return null;
            }
            _this.getTransactionsInHeight(tx, 310)
                .then(function (list) {
                var _a;
                var hash = Watch._groupByHeight(list);
                var heightList = utils_1.keys(hash)
                    .map(Number)
                    .sort(function (a, b) { return b - a; });
                var last = heightList[0], prev = heightList[1];
                if (!_this._lastBlock.height) {
                    _this._lastBlock = {
                        height: last,
                        lastId: hash[prev] && hash[prev].length ? hash[prev][0].id : '',
                        transactions: hash[last]
                    };
                    _this._emitter.trigger('change-state', list);
                }
                else {
                    var wasDispatchHash = utils_1.indexBy(utils_1.prop('id'), _this._lastBlock.transactions);
                    var toDispatch = Watch._getTransactionsToDispatch(__spreadArrays(hash[last], (hash[prev] || [])), wasDispatchHash, _this._lastBlock.lastId);
                    if (_this._lastBlock.height !== last) {
                        _this._lastBlock = {
                            height: last,
                            lastId: hash[prev] && hash[prev].length ? hash[prev][0].id : '',
                            transactions: hash[last]
                        };
                    }
                    else {
                        (_a = _this._lastBlock.transactions).push.apply(_a, toDispatch);
                    }
                    if (toDispatch.length) {
                        _this._emitter.trigger('change-state', toDispatch);
                    }
                }
                _this._addTimeout();
            }, onError);
        })["catch"](onError);
    };
    Watch.prototype.getTransactionsInHeight = function (from, limit) {
        var _this = this;
        var height = from.height;
        var loop = function (downloaded) {
            if (downloaded.length >= limit) {
                return Promise.resolve(downloaded);
            }
            return transactions_1.fetchTransactions(_this._base, _this.address, downloaded.length + 100).then(function (list) {
                if (downloaded.length === list.length) {
                    return downloaded;
                }
                var hash = Watch._groupByHeight(list);
                var heightList = utils_1.keys(hash)
                    .map(Number)
                    .sort(function (a, b) { return b - a; });
                var last = heightList[0], prev = heightList[1];
                if (last === height) {
                    return prev ? __spreadArrays(hash[last], [hash[prev][0]]) : loop(list);
                }
                else {
                    return loop(list);
                }
            });
        };
        return loop([from]);
    };
    Watch.prototype._addTimeout = function () {
        var _this = this;
        this._timer = setTimeout(function () {
            _this._run();
        }, this._interval);
    };
    Watch._groupByHeight = function (list) {
        return list.reduce(function (hash, tx) {
            if (!hash[tx.height]) {
                hash[tx.height] = [tx];
            }
            else {
                hash[tx.height].push(tx);
            }
            return hash;
        }, Object.create(null));
    };
    Watch._getTransactionsToDispatch = function (list, dispatched, lastId) {
        var result = [];
        for (var i = 0; i < list.length; i++) {
            var tx = list[i];
            if (tx.id === lastId) {
                break;
            }
            if (!dispatched[tx.id]) {
                result.push(tx);
            }
        }
        return result;
    };
    return Watch;
}());
exports.Watch = Watch;
function default_1(base, address, interval) {
    return transactions_1.fetchTransactions(base, address, 1)
        .then(function (_a) {
        var tx = _a[0];
        return new Watch(base, address, tx, interval);
    });
}
exports["default"] = default_1;


/***/ }),

/***/ "./src/tools/blocks/getNetworkByte.ts":
/*!********************************************!*\
  !*** ./src/tools/blocks/getNetworkByte.ts ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var blocks_1 = __webpack_require__(/*! ../../api-node/blocks */ "./src/api-node/blocks/index.ts");
function default_1(base) {
    return blocks_1.fetchHeadersLast(base).then(function (header) { return base58Decode(header.generator)[1]; });
}
exports["default"] = default_1;
var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
var ALPHABET_MAP = {};
for (var i = 0; i < ALPHABET.length; i++) {
    ALPHABET_MAP[ALPHABET.charAt(i)] = i;
}
function base58Decode(string) {
    var bytes, c, carry, j, i;
    if (string.length === 0) {
        return new Uint8Array(0);
    }
    i = void 0;
    j = void 0;
    bytes = [0];
    i = 0;
    while (i < string.length) {
        c = string[i];
        if (!(c in ALPHABET_MAP)) {
            throw 'Base58.decode received unacceptable input. Character \'' + c + '\' is not in the Base58 alphabet.';
        }
        j = 0;
        while (j < bytes.length) {
            bytes[j] *= 58;
            j++;
        }
        bytes[0] += ALPHABET_MAP[c];
        carry = 0;
        j = 0;
        while (j < bytes.length) {
            bytes[j] += carry;
            carry = bytes[j] >> 8;
            bytes[j] &= 0xff;
            ++j;
        }
        while (carry) {
            bytes.push(carry & 0xff);
            carry >>= 8;
        }
        i++;
    }
    i = 0;
    while (string[i] === '1' && i < string.length - 1) {
        bytes.push(0);
        i++;
    }
    return new Uint8Array(bytes.reverse());
}


/***/ }),

/***/ "./src/tools/blocks/getNetworkCode.ts":
/*!********************************************!*\
  !*** ./src/tools/blocks/getNetworkCode.ts ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var getNetworkByte_1 = __importDefault(__webpack_require__(/*! ./getNetworkByte */ "./src/tools/blocks/getNetworkByte.ts"));
function default_1(base) {
    return getNetworkByte_1["default"](base).then(function (byte) { return String.fromCharCode(byte); });
}
exports["default"] = default_1;


/***/ }),

/***/ "./src/tools/parse.ts":
/*!****************************!*\
  !*** ./src/tools/parse.ts ***!
  \****************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var reg = new RegExp('((?!\\\\)"\\w+"):\\s*(-?[\\d|\\.]{14,})', 'g');
function default_1(json) {
    return JSON.parse(json.replace(reg, "$1:\"$2\""));
}
exports["default"] = default_1;


/***/ }),

/***/ "./src/tools/query.ts":
/*!****************************!*\
  !*** ./src/tools/query.ts ***!
  \****************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
function default_1(params, evolver) {
    if (evolver === void 0) { evolver = Object.create(null); }
    var query = Object.keys(params)
        .map(function (key) { return [key, params[key]]; })
        .map(function (_a) {
        var key = _a[0], value = _a[1];
        return [key, Object.prototype.hasOwnProperty.call(evolver, key) ? evolver[key](value) : value];
    })
        .filter(function (_a) {
        var key = _a[0], value = _a[1];
        return value != null;
    })
        .map(function (_a) {
        var key = _a[0], value = _a[1];
        return key + "=" + value;
    })
        .join('&');
    return query.length ? "?" + query : '';
}
exports["default"] = default_1;
;


/***/ }),

/***/ "./src/tools/request.ts":
/*!******************************!*\
  !*** ./src/tools/request.ts ***!
  \******************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var resolve_1 = __importDefault(__webpack_require__(/*! ./resolve */ "./src/tools/resolve.ts"));
var parse_1 = __importDefault(__webpack_require__(/*! ./parse */ "./src/tools/parse.ts"));
var request = typeof fetch === 'function' ? fetch : __webpack_require__(/*! node-fetch */ "./node_modules/node-fetch/browser.js");
function default_1(params) {
    return request(resolve_1["default"](params.url, params.base), updateHeaders(params.options))
        .then(parseResponse);
}
exports["default"] = default_1;
function parseResponse(r) {
    return r.text().then(function (message) { return r.ok ? parse_1["default"](message) : Promise.reject(tryParse(message)); });
}
function tryParse(message) {
    try {
        return JSON.parse(message);
    }
    catch (e) {
        return message;
    }
}
function updateHeaders(options) {
    if (options === void 0) { options = Object.create(null); }
    return __assign({ credentials: 'include' }, options);
}


/***/ }),

/***/ "./src/tools/resolve.ts":
/*!******************************!*\
  !*** ./src/tools/resolve.ts ***!
  \******************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
function default_1(path, base) {
    return new URL(path, base).toString();
}
exports["default"] = default_1;


/***/ }),

/***/ "./src/tools/stringify.ts":
/*!********************************!*\
  !*** ./src/tools/stringify.ts ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var FIELDS = ['amount', 'matcherFee', 'price', 'fee', 'minSponsoredAssetFee', 'quantity', 'sellMatcherFee', 'buyMatcherFee'];
function default_1(data) {
    return JSON.stringify(data, function (key, value) {
        if (FIELDS.includes(key)) {
            return "!" + value + "!";
        }
        else if (key === 'value' && this['type'] === 'integer') {
            return "!" + value + "!";
        }
        else {
            return value;
        }
    }, 0).replace(/"\!(-?\d+)\!"/g, '$1');
}
exports["default"] = default_1;


/***/ }),

/***/ "./src/tools/transactions/broadcast.ts":
/*!*********************************************!*\
  !*** ./src/tools/transactions/broadcast.ts ***!
  \*********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var transactions_1 = __webpack_require__(/*! ../../api-node/transactions */ "./src/api-node/transactions/index.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/tools/utils.ts");
var wait_1 = __importDefault(__webpack_require__(/*! ./wait */ "./src/tools/transactions/wait.ts"));
var DEFAULT_BROADCAST_OPTIONS = {
    chain: false,
    confirmations: -1,
    maxWaitTime: 0,
    requestInterval: 0
};
function default_1(base, list, options) {
    var opt = __assign(__assign({}, DEFAULT_BROADCAST_OPTIONS), (options || {}));
    var isOnce = !Array.isArray(list);
    var confirmations = opt.confirmations > 0 ? 1 : 0;
    return (opt.chain
        ? chainBroadcast(base, utils_1.toArray(list), __assign(__assign({}, opt), { confirmations: confirmations }))
        : simpleBroadcast(base, utils_1.toArray(list)))
        .then(function (list) { return opt.confirmations <= 0 ? list : wait_1["default"](base, list, opt); })
        .then(function (list) { return isOnce ? utils_1.head(list) : list; });
}
exports["default"] = default_1;
function simpleBroadcast(base, list) {
    return Promise.all(list.map(function (tx) { return transactions_1.broadcast(base, tx); }));
}
function chainBroadcast(base, list, options) {
    return new Promise(function (resolve, reject) {
        var toBroadcast = list.slice().reverse();
        var result = [];
        var loop = function () {
            if (!toBroadcast.length) {
                resolve(result);
                return null;
            }
            var tx = toBroadcast.pop();
            transactions_1.broadcast(base, tx)
                .then(function (tx) { return wait_1["default"](base, tx, options); })
                .then(function (tx) {
                result.push(tx);
                loop();
            }, reject);
        };
        loop();
    });
}


/***/ }),

/***/ "./src/tools/transactions/wait.ts":
/*!****************************************!*\
  !*** ./src/tools/transactions/wait.ts ***!
  \****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var utils_1 = __webpack_require__(/*! ../utils */ "./src/tools/utils.ts");
var transactions_1 = __webpack_require__(/*! ../../api-node/transactions */ "./src/api-node/transactions/index.ts");
var constants_1 = __webpack_require__(/*! ../../constants */ "./src/constants.ts");
function default_1(base, tx, options) {
    var isOnce = !Array.isArray(tx);
    var start = Date.now();
    var confirmed = [];
    var confirmations = options && options.confirmations || 0;
    var maxWaitTime = options && options.maxWaitTime || 0;
    var requestInterval = options && options.requestInterval || 250;
    var waitTx = function (list) {
        return transactions_1.fetchStatus(base, list.map(utils_1.prop('id')))
            .then(function (status) {
            var hash = utils_1.indexBy(utils_1.prop('id'), status.statuses);
            var hasError = list.some(function (tx) { return hash[tx.id].status === constants_1.TRANSACTION_STATUSES.NOT_FOUND; });
            if (hasError) {
                throw new Error('One transaction is not in blockchain!');
            }
            var toRequest = list.filter(function (tx) {
                if (hash[tx.id].confirmations >= confirmations) {
                    confirmed.push(tx);
                    return false;
                }
                else {
                    return true;
                }
            });
            if (!toRequest.length) {
                return void 0;
            }
            if (maxWaitTime && Date.now() - start > maxWaitTime) {
                return Promise.reject('Timeout error!');
            }
            return utils_1.wait(requestInterval).then(function () { return waitTx(toRequest); });
        });
    };
    return waitTx(utils_1.toArray(tx)).then(function () { return isOnce ? utils_1.head(confirmed) : confirmed; });
}
exports["default"] = default_1;


/***/ }),

/***/ "./src/tools/utils.ts":
/*!****************************!*\
  !*** ./src/tools/utils.ts ***!
  \****************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
function isObject(obj) {
    if (typeof obj === "object" && obj !== null) {
        if (typeof Object.getPrototypeOf === "function") {
            var prototype = Object.getPrototypeOf(obj);
            return prototype === Object.prototype || prototype === null;
        }
        return Object.prototype.toString.call(obj) === "[object Object]";
    }
    return false;
}
exports.isObject = isObject;
function toArray(data) {
    return Array.isArray(data) ? data : [data];
}
exports.toArray = toArray;
function head(data) {
    return data[0];
}
exports.head = head;
function wait(time) {
    return new Promise(function (resolve) {
        setTimeout(resolve, time);
    });
}
exports.wait = wait;
function prop(key) {
    return function (data) { return data[key]; };
}
exports.prop = prop;
exports.keys = function (obj) {
    return Object.keys(obj);
};
exports.entries = function (obj) {
    return exports.keys(obj).map(function (name) { return [name, obj[name]]; });
};
exports.values = function (obj) {
    return exports.keys(obj).map(function (key) { return obj[key]; });
};
exports.assign = function (target, merge) {
    return exports.entries(merge).reduce(function (acc, _a) {
        var key = _a[0], value = _a[1];
        target[key] = value;
        return target;
    }, target);
};
exports.deepAssign = function () {
    var objects = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        objects[_i] = arguments[_i];
    }
    return objects.reduce(function (target, merge) {
        exports.keys(merge).forEach(function (key) {
            if (Array.isArray(target[key]) && Array.isArray(merge[key])) {
                target[key] = Array.from(new Set(target[key].concat(merge[key])));
            }
            else if (isObject(target[key]) && isObject(merge[key])) {
                target[key] = exports.deepAssign(target[key], merge[key]);
            }
            else {
                target[key] = merge[key];
            }
        });
        return target;
    }, objects[0] || {});
};
function map(process) {
    return function (list) { return list.map(process); };
}
exports.map = map;
function filter(process) {
    return function (list) { return list.filter(process); };
}
exports.filter = filter;
function indexBy(process, data) {
    return data.reduce(function (acc, item) {
        acc[process(item)] = item;
        return acc;
    }, {});
}
exports.indexBy = indexBy;
exports.uniq = function (list) {
    return exports.keys(list.reduce(function (acc, item) {
        acc[item] = item;
        return acc;
    }, Object.create(null)));
};
function switchTransactionByType(choices) {
    return function (tx) { return choices[tx.type] && typeof choices[tx.type] === 'function' ? choices[tx.type](tx) : undefined; };
}
exports.switchTransactionByType = switchTransactionByType;
exports.pipe = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return function (data) { return args.reduce(function (acc, item) { return item(acc); }, data); };
};


/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
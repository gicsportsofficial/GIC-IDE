import { BigNumber } from '@waves/bignumber';
import { fetchAssetsBalance } from '../../api-node/assets';
import { filter, map, pipe, prop } from '../utils';
export default function (base, address, wavesFee) {
    return fetchAssetsBalance(base, address).then(pipe(prop('balances'), filter(canBeSponsor(wavesFee)), map(currentFee(wavesFee))));
}
function canBeSponsor(wavesFee) {
    return balance => (balance.minSponsoredAssetFee
        && BigNumber.toBigNumber(balance.sponsorBalance || 0)
            .gte(wavesFee)
        && BigNumber.toBigNumber(wavesFee)
            .div(0.001 * Math.pow(10, 8))
            .mul(balance.minSponsoredAssetFee)
            .lte(balance.balance)) || false;
}
function currentFee(wavesFee) {
    const count = BigNumber.toBigNumber(wavesFee)
        .div(0.001 * Math.pow(10, 8));
    return balance => ({
        assetId: balance.assetId,
        wavesFee,
        assetFee: BigNumber.toBigNumber(balance.minSponsoredAssetFee)
            .mul(count)
            .toFixed()
    });
}
//# sourceMappingURL=availableSponsoredBalances.js.map
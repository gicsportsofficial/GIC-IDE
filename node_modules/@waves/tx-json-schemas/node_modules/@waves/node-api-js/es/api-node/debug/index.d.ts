import { TLong } from '../../interface';
import { TTransactionWithProofs } from '@waves/ts-types';
import { TDataTransactionEntry, IWithId } from '@waves/ts-types';
/**
 * Waves balance history
 * @param base
 * @param address
 */
export declare function fetchBalanceHistory(base: string, address: string, options?: RequestInit): Promise<Array<IBalanceHistory>>;
interface IBalanceHistory {
    height: number;
    balance: TLong;
}
interface IWithStateChanges {
    stateChanges: {
        data: TDataTransactionEntry<string | number>[];
        transfers: {
            address: string;
            amount: number;
            asset: string | null;
        }[];
        issues: {
            assetId: string;
            name: string;
            description: string;
            quantity: number;
            decimals: number;
            isReissuable: boolean;
            compiledScript: null | string;
            nonce: number;
        }[];
        reissues: {
            assetId: string;
            isReissuable: boolean;
            quantity: number;
        }[];
        burns: {
            assetId: string;
            quantity: number;
        }[];
        sponsorFees: {
            assetId: string;
            minSponsoredAssetFee: number;
        }[];
        error?: {
            code: number;
            text: string;
        };
    };
}
/**
 * Get list of transactions with state changes where specified address has been involved
 * @param base
 * @param address
 * @param limit
 * @param after
 */
export declare function fetchStateChangesByAddress(base: string, address: string, limit: number, after?: string, options?: RequestInit): Promise<Array<TTransactionWithProofs<TLong> & IWithId & IWithStateChanges>>;
/**
 * Get invokeScript transaction state changes
 * @param base
 * @param txId
 */
export declare function fetchStateChangesByTxId(base: string, txId: string, options?: RequestInit): Promise<TTransactionWithProofs<TLong> & IWithId & IWithStateChanges>;
export {};

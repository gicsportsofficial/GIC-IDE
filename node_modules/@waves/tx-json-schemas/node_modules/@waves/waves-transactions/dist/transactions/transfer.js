"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transfer = void 0;
/**
 * @module index
 */
const transactions_1 = require("../transactions");
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const generic_1 = require("../generic");
const validators_1 = require("../validators");
const marshall_1 = require("@waves/marshall");
const proto_serialize_1 = require("../proto-serialize");
const defaultVersions_1 = require("../defaultVersions");
function transfer(paramsOrTx, seed) {
    const type = transactions_1.TRANSACTION_TYPE.TRANSFER;
    const version = paramsOrTx.version || defaultVersions_1.DEFAULT_VERSIONS.TRANSFER;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    const tx = {
        type,
        version,
        senderPublicKey,
        assetId: generic_1.normalizeAssetId(paramsOrTx.assetId),
        recipient: paramsOrTx.recipient,
        amount: paramsOrTx.amount,
        attachment: paramsOrTx.attachment || null,
        fee: generic_1.fee(paramsOrTx, 100000),
        feeAssetId: generic_1.normalizeAssetId(paramsOrTx.feeAssetId),
        timestamp: paramsOrTx.timestamp || Date.now(),
        proofs: paramsOrTx.proofs || [],
        chainId: generic_1.networkByte(paramsOrTx.chainId, generic_1.chainIdFromRecipient(paramsOrTx.recipient)),
        id: '',
    };
    validators_1.validate.transfer(tx);
    const bytes = version > 2 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, ts_lib_crypto_1.signBytes(s, bytes), i));
    tx.id = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes));
    return tx;
}
exports.transfer = transfer;
//# sourceMappingURL=transfer.js.map
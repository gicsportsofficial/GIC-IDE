import { TLong } from '../../interface';
import { TTransactionFromAPI } from '@waves/ts-types';
/**
 * GET /blocks/headers/seq/{from}/{to}
 * Get block headers at specified heights
 * @param base
 * @param from
 * @param to
 */
export declare function fetchHeadersSeq(base: string, from: number, to: number, options?: RequestInit): Promise<Array<IBlockHeader>>;
/**
 * GET /blocks/headers/last
 * Last block header
 * @param base
 */
export declare function fetchHeadersLast(base: string, options?: RequestInit): Promise<IBlockHeader>;
/**
 * GET /blocks/height/{id}
 * Height of a block by its id
 * @param base
 * @param id
 */
export declare function fetchHeightById(base: string, id: string, options?: RequestInit): Promise<{
    height: number;
}>;
/**
 * GET /blocks/headers/at/{height}
 * Block header at height
 * @param base
 * @param height
 */
export declare function fetchHeadersAt(base: string, height: number, options?: RequestInit): Promise<IBlockHeader>;
/**
 * GET /blocks/at/{height}
 * Get block at specified height
 * @param base
 * @param height
 */
export declare function BlockAt(base: string, height: number, options?: RequestInit): Promise<IBlock>;
/**
 * GET /blocks/seq/{from}/{to}
 * Block range
 * @param base
 * @param from
 * @param to
 */
export declare function fetchSeq(base: string, from: number, to: number, options?: RequestInit): Promise<Array<IBlock>>;
/**
 * GET /blocks/signature/{signature}
 * Get block by its signature
 * @param base
 * @param signature
 */
export declare function fetchBlockBySignature(base: string, signature: string, options?: RequestInit): Promise<IBlock>;
/**
 * GET /blocks/first
 * Get genesis block
 * @param base
 */
export declare function fetchFirst(base: string, options?: RequestInit): Promise<IBlock>;
/**
 * /blocks/address/{address}/{from}/{to}
 * Get list of blocks generated by specified address
 * @param base
 * @param address
 * @param from
 * @param to
 */
export declare function fetchBlocksByAddress(base: string, address: string, from: number, to: number, options?: RequestInit): Promise<Array<IBlock>>;
/**
 * GET /blocks/last
 * Last block
 * @param base
 */
export declare function fetchLast(base: string, options?: RequestInit): Promise<IBlock>;
/**
 * GET /blocks/delay/{id}/{blockNum}
 * Average delay in milliseconds between last blockNum blocks starting from block with id
 * @param base
 * @param id
 * @param blockNum
 */
export declare function fetchDelay(base: string, id: string, blockNum: string, options?: RequestInit): Promise<{
    delay: number;
}>;
/**
 * GET /blocks/height
 * @param base
 */
export declare function fetchHeight(base: string, options?: RequestInit): Promise<{
    height: number;
}>;
export interface IBlockHeader {
    blocksize: number;
    reward: TLong;
    signature: string;
    generator: string;
    version: number;
    reference: string;
    features: Array<string>;
    totalFee: TLong;
    desiredReward: number;
    transactionCount: number;
    timestamp: number;
    height: number;
    'nxt-consensus': {
        'base-target': number;
        'generation-signature': string;
    };
}
export interface IBlock extends IBlockHeader {
    fee: TLong;
    transactions: Array<TTransactionFromAPI<TLong>>;
}

import * as wt from '@waves/waves-transactions';
export declare type TSetupAccountsFunc = (balances: Record<string, number>, options?: {
    masterSeed: string;
    nonce: string;
}) => Promise<Record<string, string>>;
export interface IAugmentOptions {
    broadcastWrapper?: (f: typeof wt.broadcast) => typeof wt.broadcast;
    setupAccountsWrapper?: (f: TSetupAccountsFunc) => TSetupAccountsFunc;
}
export default function augment(global: any, options?: IAugmentOptions): void;
export interface IPayment {
    assetId?: string | null;
    amount: number;
}
export interface IPayment {
    assetId?: string | null;
    amount: number;
}
interface IInvokeArgument {
    /**
     * possible values:   "string" | "number" | "binary" | "boolean"
     */
    type: string;
    value: string | number | boolean;
}
export interface IInvokeOptions {
    dApp: string;
    functionName: string;
    arguments?: (number | string | boolean | Uint8Array | number[] | IInvokeArgument)[];
    payment?: IPayment | IPayment[] | number;
}
export {};

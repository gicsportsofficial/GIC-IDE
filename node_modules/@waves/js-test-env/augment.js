"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var wt = __importStar(require("@waves/waves-transactions"));
var ride_js_1 = require("@waves/ride-js");
var chai_1 = __importDefault(require("chai"));
var chai_as_promised_1 = __importDefault(require("chai-as-promised"));
chai_1["default"].use(chai_as_promised_1["default"]);
var NO_SEED_MSG = "Seed is undefined. Please check that you have seed in your config file or web ide settings";
function augment(global, options) {
    var _this = this;
    function withDefaults(options) {
        if (options === void 0) { options = { apiBase: global.env.API_BASE }; }
        return {
            timeout: options.timeout || global.env.timeout || 20000,
            apiBase: options.apiBase || global.env.API_BASE
        };
    }
    var envSeed = function () { return global.env.SEED || (function () {
        throw new Error(NO_SEED_MSG);
    })(); };
    function currentAddress() {
        return wt.libs.crypto.address(envSeed(), global.env.CHAIN_ID);
    }
    function injectEnv(f) {
        return function (po, seed) {
            return f(__assign({ chainId: global.env.CHAIN_ID, additionalFee: global.env.defaultAdditionalFee }, po), seed === null ? null : seed || envSeed());
        };
    }
    global.accounts = {};
    global.wavesCrypto = wt.libs.crypto;
    global.chai = chai_1["default"];
    global.expect = chai_1["default"].expect;
    global.alias = injectEnv(wt.alias);
    global.burn = injectEnv(wt.burn);
    global.cancelLease = injectEnv(wt.cancelLease);
    global.cancelOrder = injectEnv(wt.cancelOrder);
    global.data = injectEnv(wt.data);
    global.issue = injectEnv(wt.issue);
    global.reissue = injectEnv(wt.reissue);
    global.lease = injectEnv(wt.lease);
    global.massTransfer = injectEnv(wt.massTransfer);
    global.order = injectEnv(wt.order);
    global.transfer = injectEnv(wt.transfer);
    global.setScript = injectEnv(wt.setScript);
    global.setAssetScript = injectEnv(wt.setAssetScript);
    global.invokeScript = injectEnv(wt.invokeScript);
    global.sponsorship = injectEnv(wt.sponsorship);
    global.signTx = injectEnv(wt.signTx);
    global.updateAssetInfo = injectEnv(wt.updateAssetInfo);
    global.waitForTx = function (txId, options, requestOptions) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        return [2 /*return*/, wt.nodeInteraction.waitForTx(txId, withDefaults(options), requestOptions || global.env.requestOptions)];
    }); }); };
    global.waitForTxWithNConfirmations = function (txId, confirmations, options, requestOptions) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        return [2 /*return*/, wt.nodeInteraction.waitForTxWithNConfirmations(txId, confirmations, withDefaults(options), requestOptions || global.env.requestOptions)];
    }); }); };
    global.waitNBlocks = function (blocksCount, options, requestOptions) {
        return wt.nodeInteraction.waitNBlocks(blocksCount, withDefaults(options), requestOptions || global.env.requestOptions);
    };
    global.currentHeight = function (apiBase, requestOptions) {
        return wt.nodeInteraction.currentHeight(apiBase || global.env.API_BASE, requestOptions || global.env.requestOptions);
    };
    global.transactionById = function (txId, apiBase, requestOptions) {
        return wt.nodeInteraction.transactionById(txId, apiBase || global.env.API_BASE, requestOptions || global.env.requestOptions);
    };
    global.waitForHeight = function (target, options, requestOptions) {
        return wt.nodeInteraction.waitForHeight(target, withDefaults(options), requestOptions || global.env.requestOptions);
    };
    global.balance = function (address, apiBase, requestOptions) {
        return wt.nodeInteraction.balance(address || currentAddress(), apiBase || global.env.API_BASE, requestOptions || global.env.requestOptions);
    };
    global.assetBalance = function (assetId, address, apiBase, requestOptions) {
        return wt.nodeInteraction.assetBalance(assetId, address || currentAddress(), apiBase || global.env.API_BASE, requestOptions || global.env.requestOptions);
    };
    global.balanceDetails = function (address, apiBase, requestOptions) {
        return wt.nodeInteraction.balanceDetails(address || currentAddress(), apiBase || global.env.API_BASE, requestOptions || global.env.requestOptions);
    };
    global.accountData = function (address, apiBase, requestOptions) {
        return wt.nodeInteraction.accountData(address || currentAddress(), apiBase || global.env.API_BASE, requestOptions || global.env.requestOptions);
    };
    global.accountDataByKey = function (key, address, apiBase, requestOptions) {
        return wt.nodeInteraction.accountDataByKey(key, address || currentAddress(), apiBase || global.env.API_BASE, requestOptions || global.env.requestOptions);
    };
    global.stateChanges = function (invokeScriptTxId, apiBase, requestOptions) {
        return wt.nodeInteraction.stateChanges(invokeScriptTxId, apiBase || global.env.API_BASE, requestOptions || global.env.requestOptions);
    };
    global.broadcast = function (tx, apiBase, requestOptions) { return options && options.broadcastWrapper
        ? options.broadcastWrapper(wt.nodeInteraction.broadcast)(tx, apiBase || global.env.API_BASE, requestOptions || global.env.requestOptions)
        : wt.nodeInteraction.broadcast(tx, apiBase || global.env.API_BASE, requestOptions || global.env.requestOptions); };
    global.file = function (name) {
        if (typeof global.env.file !== 'function') {
            throw new Error('File content API is not available. Please provide it to the console');
        }
        return global.env.file(name);
    };
    global.contract = function () { return global.env.file(); };
    global.keyPair = function (seed) { return wt.libs.crypto.keyPair(seed || envSeed()); };
    global.publicKey = function (seed) { return wt.libs.crypto.keyPair(seed || envSeed()).publicKey; };
    global.privateKey = function (seed) { return wt.libs.crypto.keyPair(seed || envSeed()).privateKey; };
    global.address = function (seed, chainId) { return wt.libs.crypto.address(seed || envSeed(), chainId || global.env.CHAIN_ID); };
    global.compile = function (code) {
        var resultOrError = ride_js_1.compile(code, 3);
        if ('error' in resultOrError)
            throw new Error(resultOrError.error);
        return resultOrError.result.base64;
    };
    global.invoke = function (_a, seed, apiBase, requestOptions) {
        var dApp = _a.dApp, functionName = _a.functionName, argsOpt = _a.arguments, paymentOpt = _a.payment;
        var payment = [];
        if (typeof paymentOpt === 'number')
            payment = [{ assetId: null, amount: paymentOpt }];
        if (typeof paymentOpt === 'object' && !Array.isArray(paymentOpt))
            payment = [paymentOpt];
        if (typeof paymentOpt === 'object' && Array.isArray(paymentOpt))
            payment = paymentOpt;
        var isIInvokeArgument = function (arg) {
            return typeof arg === 'object' && 'type' in arg && 'value' in arg;
        };
        var decoder = new TextDecoder('utf8');
        var args = (argsOpt || []).map(function (arg) {
            //number
            if (typeof arg === 'number')
                return { type: 'integer', value: arg };
            //string
            if (typeof arg === 'string')
                return { type: 'string', value: arg };
            //boolean
            if (typeof arg === 'boolean')
                return { type: 'boolean', value: arg };
            //IInvokeArgument
            if (isIInvokeArgument(arg))
                return arg;
            //Uint8Array
            if (typeof arg === 'object' && !Array.isArray(arg)) {
                return { type: 'binary', value: btoa(decoder.decode(arg)) };
            }
            //number[]
            if (typeof arg === 'object' && Array.isArray(arg) && arg.length > 0 && typeof arg[0] === 'number') {
                return { type: 'binary', value: btoa(decoder.decode(Uint8Array.from(arg))) };
            }
            return null;
        }).filter(function (v) { return v != null; });
        var params = { dApp: dApp, feeAssetId: null, call: { "function": functionName, args: args }, payment: payment };
        var tx = global.invokeScript(params, seed || envSeed());
        return global.broadcast(tx, apiBase || global.env.API_BASE, requestOptions);
    };
    global.signBytes = function (bytes, seed) {
        return wt.libs.crypto.signBytes(bytes, seed || envSeed());
    };
    var setupAccountsFunc = function (balances, options, requestOptions) { return __awaiter(_this, void 0, void 0, function () {
        var getNonce, nonce, masterSeed, transfers, totalAmount, mtt;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!global.accounts)
                        global.accounts = {};
                    getNonce = function () { return [].map.call(wt.libs.crypto.randomBytes(4), function (n) { return n.toString(16); })
                        .join(''); };
                    nonce = (options && options.nonce) || getNonce();
                    masterSeed = (options && options.masterSeed) || envSeed();
                    global.console.log("Generating accounts with nonce: " + nonce);
                    transfers = [];
                    Object.entries(balances).forEach(function (_a) {
                        var name = _a[0], balance = _a[1];
                        var seed = name + '#' + nonce;
                        var addr = wt.libs.crypto.address(seed, global.env.CHAIN_ID);
                        global.accounts[name] = seed;
                        global.console.log("Account generated: " + seed + " - " + addr);
                        transfers.push({
                            recipient: addr,
                            amount: balance
                        });
                    });
                    totalAmount = transfers.reduce(function (acc, _a) {
                        var amount = _a.amount;
                        return acc + +amount;
                    }, 0);
                    if (!(totalAmount > 0)) return [3 /*break*/, 3];
                    mtt = global.massTransfer({ transfers: transfers }, masterSeed);
                    return [4 /*yield*/, global.broadcast(mtt, undefined, requestOptions)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, global.waitForTx(mtt.id, undefined, requestOptions)];
                case 2:
                    _a.sent();
                    global.console.log("Accounts successfully funded");
                    _a.label = 3;
                case 3: return [2 /*return*/, __assign({}, global.accounts)];
            }
        });
    }); };
    global.setupAccounts = options && options.setupAccountsWrapper
        ? options.setupAccountsWrapper(setupAccountsFunc)
        : setupAccountsFunc;
}
exports["default"] = augment;

import { Base64string, Long } from './common';
export declare type InvokeScriptCall<LONG = Long> = {
    function: string;
    args: Array<InvokeScriptCallArgument<LONG>>;
};
export declare type InvokeScriptPayment<LONG = Long> = {
    assetId: string | null;
    amount: LONG;
};
export declare type InvokeScriptCallArgument<LONG = Long> = InvokeScriptCallStringArgument | InvokeScriptCallBinaryArgument | InvokeScriptCallBooleanArgument | InvokeScriptCallIntegerArgument<LONG> | InvokeScriptCallUnionArgument<LONG> | InvokeScriptCallListArgument<LONG, InvokeScriptCallStringArgument | InvokeScriptCallBinaryArgument | InvokeScriptCallBooleanArgument | InvokeScriptCallIntegerArgument<LONG>>;
export declare type InvokeScriptCallArgumentGeneric<Type, Value> = {
    type: Type;
    value: Value;
};
export declare type InvokeScriptCallStringArgument = InvokeScriptCallArgumentGeneric<'string', string>;
export declare type InvokeScriptCallBinaryArgument = InvokeScriptCallArgumentGeneric<'binary', Base64string>;
export declare type InvokeScriptCallBooleanArgument = InvokeScriptCallArgumentGeneric<'boolean', boolean>;
export declare type InvokeScriptCallIntegerArgument<LONG = Long> = InvokeScriptCallArgumentGeneric<'integer', LONG>;
export declare type InvokeScriptCallUnionArgument<LONG = Long> = InvokeScriptCallArgumentGeneric<'union', LONG> & {
    valueType: 'binary' | 'boolean' | 'integer' | 'string';
};
export declare type InvokeScriptCallListArgument<LONG, ITEMS extends InvokeScriptCallStringArgument | InvokeScriptCallBinaryArgument | InvokeScriptCallBooleanArgument | InvokeScriptCallIntegerArgument<LONG> | InvokeScriptCallUnionArgument<LONG>> = InvokeScriptCallArgumentGeneric<'list', Array<ITEMS>>;

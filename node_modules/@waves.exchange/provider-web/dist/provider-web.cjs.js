"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
exports[Symbol.toStringTag] = "Module";
var wavesBrowserBus = require("@waves/waves-browser-bus");
var typedTsEvents = require("typed-ts-events");
class Queue {
  constructor(maxLength) {
    this._actions = [];
    this._maxLength = maxLength;
  }
  get length() {
    return this._actions.length + (this._active == null ? 0 : 1);
  }
  push(action) {
    if (this._actions.length >= this._maxLength) {
      throw new Error("Cant't push action! Queue is full!");
    }
    return new Promise((resolve, reject) => {
      const onEnd = () => {
        this._active = void 0;
        const index = this._actions.map((x) => x.action).indexOf(actionCallback);
        if (index !== -1) {
          this._actions.splice(index, 1);
        }
        this.run();
      };
      const actionCallback = () => action().then((res) => {
        onEnd();
        resolve(res);
      }, (err) => {
        onEnd();
        reject(err);
      });
      this._actions.push({action: actionCallback, reject});
      if (this.length === 1) {
        this.run();
      }
    });
  }
  clear(error) {
    error = error || new Error("Rejection with clear queue!");
    const e = typeof error === "string" ? new Error(error) : error;
    this._actions.splice(0, this._actions.length).forEach((item) => item.reject(e));
    this._active = void 0;
  }
  canPush() {
    return this._actions.length < this._maxLength;
  }
  run() {
    const item = this._actions.shift();
    if (item == null) {
      return void 0;
    }
    this._active = item.action();
  }
}
class Transport {
  constructor(queueLength) {
    this._events = [];
    this._toRunEvents = [];
    this._queue = new Queue(queueLength);
  }
  dropConnection() {
    this._queue.clear(new Error("User rejection!"));
    this._events.forEach((event) => this._toRunEvents.push(event));
    this._dropTransportConnect();
  }
  sendEvent(callback) {
    this._events.push(callback);
    this._toRunEvents.push(callback);
  }
  dialog(callback) {
    this._runBeforeShow();
    return this._getBus().then((bus) => {
      const action = this._wrapAction(() => callback(bus));
      this._runEvents(bus);
      if (this._queue.canPush()) {
        return this._queue.push(action).then((result) => {
          this._runAfterShow();
          return result;
        }).catch((error) => {
          this._runAfterShow();
          return Promise.reject(error);
        });
      } else {
        return Promise.reject(new Error("Queue is full!"));
      }
    });
  }
  _runBeforeShow() {
    if (this._queue.length === 0) {
      this._beforeShow();
    }
  }
  _runAfterShow() {
    if (this._queue.length === 0) {
      this._afterShow();
    }
  }
  _runEvents(bus) {
    this._toRunEvents.splice(0, this._events.length).forEach((callback) => callback(bus));
  }
  _wrapAction(action) {
    return this._toRunEvents ? () => {
      const result = action();
      result.catch(() => {
        this._events.forEach((event) => this._toRunEvents.push(event));
      });
      return result;
    } : action;
  }
}
const TransportIframe2 = class extends Transport {
  constructor(url, queueLength) {
    super(queueLength);
    this._url = url;
    this._initIframe();
  }
  get() {
    if (!this._iframe) {
      this._initIframe();
    }
    return this._iframe;
  }
  _dropTransportConnect() {
    if (this._iframe != null) {
      document.body.removeChild(this._iframe);
      this._initIframe();
    }
    if (this._bus) {
      this._bus.destroy();
      this._bus = void 0;
    }
  }
  _getBus() {
    if (this._bus) {
      return Promise.resolve(this._bus);
    }
    return wavesBrowserBus.WindowAdapter.createSimpleWindowAdapter(this._iframe).then((adapter) => new Promise((resolve) => {
      this._bus = new wavesBrowserBus.Bus(adapter, -1);
      this._bus.once("ready", () => {
        resolve(this._bus);
      });
    }));
  }
  _beforeShow() {
    this._showIframe();
  }
  _afterShow() {
    this._hideIframe();
  }
  _initIframe() {
    this._iframe = this._createIframe();
    this._addIframeToDom(this._iframe);
    this._listenFetchURLError(this._iframe);
    this._hideIframe();
  }
  _addIframeToDom(iframe) {
    if (document.body != null) {
      document.body.appendChild(iframe);
    } else {
      document.addEventListener("DOMContentLoaded", () => {
        document.body.appendChild(iframe);
      });
    }
  }
  _createIframe() {
    const iframe = document.createElement("iframe");
    iframe.style.transition = "opacity .2s";
    iframe.style.position = "absolute";
    iframe.style.opacity = "0";
    iframe.style.width = "100%";
    iframe.style.height = "100%";
    iframe.style.left = "0";
    iframe.style.top = "0";
    iframe.style.border = "none";
    iframe.style.position = "fixed";
    return iframe;
  }
  _showIframe() {
    const shownStyles = {
      width: "100%",
      height: "100%",
      left: "0",
      top: "0",
      border: "none",
      position: "fixed",
      display: "block",
      opacity: "0",
      zIndex: "99999999"
    };
    this._applyStyle(shownStyles);
    if (TransportIframe2._timer != null) {
      clearTimeout(TransportIframe2._timer);
    }
    TransportIframe2._timer = setTimeout(() => {
      this._applyStyle({opacity: "1"});
    }, 0);
  }
  _hideIframe() {
    const hiddenStyle = {
      opacity: "0"
    };
    this._applyStyle(hiddenStyle);
    if (TransportIframe2._timer != null) {
      clearTimeout(TransportIframe2._timer);
    }
    TransportIframe2._timer = setTimeout(() => {
      this._applyStyle({
        width: "10px",
        height: "10px",
        left: "-100px",
        top: "-100px",
        position: "absolute",
        opacity: "0",
        zIndex: "0",
        display: "none"
      });
    }, 200);
  }
  _applyStyle(styles) {
    Object.entries(styles).forEach(([name, value]) => {
      if (value != null) {
        if (this._iframe) {
          this._iframe.style[name] = value;
        }
      }
    });
  }
  _renderErrorPage(bodyElement, onClose, errorMessage) {
    if (bodyElement.parentElement) {
      bodyElement.parentElement.style.height = "100%";
    }
    Object.assign(bodyElement.style, {
      position: "relative",
      boxSizing: "border-box",
      width: "100%",
      height: "100%",
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      margin: "0px"
    });
    const backdropElement = document.createElement("div");
    Object.assign(backdropElement.style, {
      position: "fixed",
      zIndex: "-1",
      height: "100%",
      width: "100%",
      overflow: "hidden",
      backgroundColor: "#000",
      opacity: "0.6"
    });
    const wrapperElement = document.createElement("div");
    Object.assign(wrapperElement.style, {
      position: "fixed",
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      flexDirection: "column",
      margin: "0",
      backgroundColor: "#292F3C",
      width: "520px",
      borderRadius: "6px",
      padding: "40px",
      boxSizing: "border-box"
    });
    const errorMessageElement = document.createElement("div");
    errorMessageElement.textContent = errorMessage;
    Object.assign(errorMessageElement.style, {
      fontSize: "15px",
      lineHeight: "20px",
      color: "#fff",
      marginBottom: "40px",
      fontFamily: "Roboto, sans-serif"
    });
    const buttonElement = document.createElement("button");
    buttonElement.textContent = "OK";
    buttonElement.addEventListener("click", () => onClose());
    Object.assign(buttonElement.style, {
      width: "100%",
      fontSize: "15px",
      lineHeight: "48px",
      padding: " 0 40px",
      color: "#fff",
      backgroundColor: "#5A81EA",
      outline: "none",
      border: "none",
      cursor: "pointer",
      fontFamily: "Roboto, sans-serif",
      borderRadius: "4px"
    });
    wrapperElement.appendChild(errorMessageElement);
    wrapperElement.appendChild(buttonElement);
    bodyElement.appendChild(backdropElement);
    bodyElement.appendChild(wrapperElement);
  }
  _listenFetchURLError(iframe) {
    fetch(this._url).catch(() => {
      iframe.addEventListener("load", () => {
        if (!iframe.contentDocument) {
          return;
        }
        this._renderErrorPage(iframe.contentDocument.body, () => this.dropConnection(), "The request could not be processed. To resume your further work, disable the installed plugins.");
        this._showIframe();
      });
    });
  }
};
let TransportIframe = TransportIframe2;
TransportIframe._timer = null;
function isSafari() {
  const userAgent = navigator.userAgent.toLowerCase();
  const isSafariUA = userAgent.includes("safari") && !userAgent.includes("chrome");
  const iOS = navigator.platform != null && /iPad|iPhone|iPod/.test(navigator.platform);
  return iOS || isSafariUA;
}
class ProviderWeb {
  constructor(clientUrl, logs) {
    this.user = null;
    this.emitter = new typedTsEvents.EventEmitter();
    this._clientUrl = (clientUrl || "https://waves.exchange/signer/") + `?${ProviderWeb._getCacheClean()}`;
    this._transport = new TransportIframe(this._clientUrl, 3);
    if (logs === true) {
      wavesBrowserBus.config.console.logLevel = wavesBrowserBus.config.console.LOG_LEVEL.VERBOSE;
    }
  }
  static _getCacheClean() {
    return String(Date.now() % (1e3 * 60));
  }
  on(event, handler) {
    this.emitter.on(event, handler);
    return this;
  }
  once(event, handler) {
    this.emitter.once(event, handler);
    return this;
  }
  off(event, handler) {
    this.emitter.once(event, handler);
    return this;
  }
  connect(options) {
    return Promise.resolve(this._transport.sendEvent((bus) => bus.dispatchEvent("connect", options)));
  }
  logout() {
    this.user = null;
    return Promise.resolve(this._transport.dropConnection());
  }
  login() {
    var _a;
    if (this.user) {
      return Promise.resolve(this.user);
    }
    const iframe = this._transport.get();
    if (isSafari()) {
      const win = (_a = iframe.contentWindow) == null ? void 0 : _a.open(this._clientUrl);
      if (!win) {
        throw new Error("Window was blocked");
      }
    }
    iframe.src = this._clientUrl;
    return this._transport.dialog((bus) => bus.request("login").then((userData) => {
      this.user = userData;
      return userData;
    }).catch((err) => {
      this._transport.dropConnection();
      return Promise.reject(err);
    }));
  }
  signMessage(data) {
    return this.login().then(() => this._transport.dialog((bus) => bus.request("sign-message", data)));
  }
  signTypedData(data) {
    return this.login().then(() => this._transport.dialog((bus) => bus.request("sign-typed-data", data)));
  }
  sign(toSign) {
    return this.login().then(() => this._transport.dialog((bus) => bus.request("sign", toSign)));
  }
}
exports.ProviderWeb = ProviderWeb;

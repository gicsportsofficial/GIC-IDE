import { TBus, ITransport } from './interface';
export declare abstract class Transport<T> implements ITransport<T> {
    private readonly _queue;
    private readonly _events;
    private readonly _toRunEvents;
    constructor(queueLength: number);
    dropConnection(): void;
    sendEvent(callback: TEventDispatcher<void>): void;
    dialog<T>(callback: TEventDispatcher<T>): Promise<T>;
    private _runBeforeShow;
    private _runAfterShow;
    private _runEvents;
    private _wrapAction;
    abstract get(): T;
    protected abstract _dropTransportConnect(): void;
    protected abstract _beforeShow(): void;
    protected abstract _afterShow(): void;
    protected abstract _getBus(): Promise<TBus>;
}
declare type TEventDispatcher<T> = (bus: TBus) => Promise<T>;
export {};

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
'use strict';
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
const base_1 = require("./base");
const nodeConnection_1 = require("./nodeConnection");
const codeServices_1 = require("./codeServices");
const is = require("./utils/is");
const c2p = require("./codeConverter");
const p2c = require("./protocolConverter");
__export(require("vscode-languageserver-types"));
function getId(arg1, arg2) {
    return is.string(arg2) ? arg1 : arg1.toLowerCase();
}
function getName(arg1, arg2) {
    return is.string(arg2) ? arg2 : arg1;
}
function getServerOptions(arg2, arg3) {
    return (is.string(arg2) ? arg3 : arg2);
}
function getClientOptions(arg2, arg3, arg4) {
    return (is.string(arg2) ? arg4 : arg3);
}
function getForceDebug(arg2, arg4, arg5) {
    return (is.string(arg2) ? !!arg5 : arg4);
}
function getServices(clientOptions) {
    const _c2p = c2p.createConverter(clientOptions.uriConverters ? clientOptions.uriConverters.code2Protocol : undefined);
    const _p2c = p2c.createConverter(clientOptions.uriConverters ? clientOptions.uriConverters.protocol2Code : undefined);
    return {
        languages: codeServices_1.createLanguages(_p2c, _c2p),
        workspace: codeServices_1.createWorkspace(_c2p),
        commands: codeServices_1.createCommands(),
        window: codeServices_1.createWindow()
    };
}
function createOptions(arg1, arg2, arg3, arg4, arg5) {
    const id = getId(arg1, arg2);
    const name = getName(arg1, arg2);
    const serverOptions = getServerOptions(arg2, arg3);
    const clientOptions = getClientOptions(arg2, arg3, arg4);
    const services = getServices(clientOptions);
    const forceDebug = getForceDebug(arg2, arg4, arg5);
    const stdioEncoding = clientOptions.stdioEncoding;
    const workspace = services.workspace;
    const connectionProvider = new nodeConnection_1.NodeConnectionProvider({ serverOptions, forceDebug, stdioEncoding, workspace });
    return { id, name, clientOptions, services, connectionProvider };
}
class LanguageClient extends base_1.BaseLanguageClient {
    constructor(arg1, arg2, arg3, arg4, arg5) {
        super(createOptions(arg1, arg2, arg3, arg4, arg5));
        const clientOptions = getClientOptions(arg2, arg3, arg4) || {};
        this._c2p = c2p.createConverter(clientOptions.uriConverters ? clientOptions.uriConverters.code2Protocol : undefined);
        this._p2c = p2c.createConverter(clientOptions.uriConverters ? clientOptions.uriConverters.protocol2Code : undefined);
    }
    get protocol2CodeConverter() {
        return this._p2c;
    }
    get code2ProtocolConverter() {
        return this._c2p;
    }
}
exports.LanguageClient = LanguageClient;

/// <reference types="node" />
import * as cp from 'child_process';
import ChildProcess = cp.ChildProcess;
import { IConnection, InitializeError } from './base';
import { OutputChannel, Workspace } from './services';
import { ErrorCodes, ResponseError, RequestType, RequestType0, RequestHandler, RequestHandler0, GenericRequestHandler, NotificationType, NotificationType0, NotificationHandler, NotificationHandler0, GenericNotificationHandler, MessageReader, MessageWriter, MessageConnection } from 'vscode-jsonrpc';
import { IConnectionProvider, ConnectionErrorHandler, ConnectionCloseHandler } from './connection';
export { ResponseError, InitializeError, ErrorCodes, RequestType, RequestType0, RequestHandler, RequestHandler0, GenericRequestHandler, NotificationType, NotificationType0, NotificationHandler, NotificationHandler0, GenericNotificationHandler };
export * from 'vscode-languageserver-types';
export * from './protocol';
export * from './base';
export interface StreamInfo {
    writer: NodeJS.WritableStream;
    reader: NodeJS.ReadableStream;
}
export interface ExecutableOptions {
    cwd?: string;
    stdio?: string | string[];
    env?: any;
    detached?: boolean;
}
export interface Executable {
    command: string;
    args?: string[];
    options?: ExecutableOptions;
}
export interface ForkOptions {
    cwd?: string;
    env?: any;
    encoding?: string;
    execArgv?: string[];
}
export declare enum TransportKind {
    stdio = 0,
    ipc = 1,
    pipe = 2,
}
export interface NodeModule {
    module: string;
    transport?: TransportKind;
    args?: string[];
    runtime?: string;
    options?: ForkOptions;
}
export declare type ServerOptions = Executable | {
    run: Executable;
    debug: Executable;
} | {
    run: NodeModule;
    debug: NodeModule;
} | NodeModule | (() => Thenable<ChildProcess | StreamInfo>);
export declare namespace NodeConnectionProvider {
    interface IOptions {
        serverOptions: ServerOptions;
        forceDebug?: boolean;
        stdioEncoding?: string;
        workspace: Workspace;
    }
}
export declare class NodeConnectionProvider implements IConnectionProvider {
    private _serverOptions;
    private _encoding;
    private _forceDebug;
    private workspace;
    private _childProcess;
    constructor(options: NodeConnectionProvider.IOptions);
    get(errorHandler: ConnectionErrorHandler, closeHandler: ConnectionCloseHandler, outputChannel: OutputChannel | undefined): Thenable<IConnection>;
    protected createRPCConnection(outputChannel: OutputChannel | undefined): Thenable<MessageConnection>;
    protected createConnection(inputStream: NodeJS.ReadableStream, outputStream: NodeJS.WritableStream): MessageConnection;
    protected createConnection(reader: MessageReader, writer: MessageWriter): MessageConnection;
    private checkProcessDied(childProcess);
    protected readonly rootPath: string | undefined;
}
